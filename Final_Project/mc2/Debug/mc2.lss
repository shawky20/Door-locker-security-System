
mc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003042  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00003042  000030d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800078  00800078  000030ee  2**0
                  ALLOC
  3 .stab         00003378  00000000  00000000  000030f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001676  00000000  00000000  00006468  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000099d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a8c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b670  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ba5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c22b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <main>
      8a:	0c 94 1f 18 	jmp	0x303e	; 0x303e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUZZER_init>:

/*
 * Description :
 * set the direction of the BUZZER pin
 */
void BUZZER_init(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID , BUZZER_PIN_ID, PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 c5 06 	call	0xd8a	; 0xd8a <GPIO_setupPinDirection>
	/*initialy OFF */
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID,LOGIC_LOW);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	62 e0       	ldi	r22, 0x02	; 2
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <BUZZER_on>:

/*
 * Description :
 * turn on the buzzer
 */
void BUZZER_on(void){
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID ,BUZZER_PIN_ID,LOGIC_HIGH);
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <BUZZER_off>:

/*
 * Description :
 * turn off the buzzer
 */
void BUZZER_off(void){
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID,LOGIC_LOW);
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	62 e0       	ldi	r22, 0x02	; 2
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <DcMotor_Init>:
 * Initialize the DC Motor by:
 * 1. Setup the direction of the two motor pins as output by send the request to GPIO driver.
 * 2. Stop the motor at the beginning
 */
void DcMotor_Init(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	/* Setup the two motor pins as output pins */
	GPIO_setupPinDirection(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,PIN_OUTPUT);
     ba0:	83 e0       	ldi	r24, 0x03	; 3
     ba2:	64 e0       	ldi	r22, 0x04	; 4
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,PIN_OUTPUT);
     baa:	83 e0       	ldi	r24, 0x03	; 3
     bac:	65 e0       	ldi	r22, 0x05	; 5
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 c5 06 	call	0xd8a	; 0xd8a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_EN1_ID,DC_MOTOR_EN1_ID ,PIN_OUTPUT);
     bb4:	83 e0       	ldi	r24, 0x03	; 3
     bb6:	66 e0       	ldi	r22, 0x06	; 6
     bb8:	41 e0       	ldi	r20, 0x01	; 1
     bba:	0e 94 c5 06 	call	0xd8a	; 0xd8a <GPIO_setupPinDirection>

	/* Motor is stopped at the beginning */
	GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	64 e0       	ldi	r22, 0x04	; 4
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
     bc8:	83 e0       	ldi	r24, 0x03	; 3
     bca:	65 e0       	ldi	r22, 0x05	; 5
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
	/*enable pin high*/
	GPIO_writePin(DC_MOTOR_PORT_EN1_ID,DC_MOTOR_EN1_ID ,LOGIC_HIGH);
     bd2:	83 e0       	ldi	r24, 0x03	; 3
     bd4:	66 e0       	ldi	r22, 0x06	; 6
     bd6:	41 e0       	ldi	r20, 0x01	; 1
     bd8:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
}
     bdc:	cf 91       	pop	r28
     bde:	df 91       	pop	r29
     be0:	08 95       	ret

00000be2 <DcMotor_Rotate>:
 * Description :
 * 1. Rotate  or Stop the motor according to the state input variable.
 * 2. Control the motor speed 0 --> 100% from its maximum speed by sending to PWM driver.
 */
void DcMotor_Rotate(DcMotor_State state)
{
     be2:	df 93       	push	r29
     be4:	cf 93       	push	r28
     be6:	0f 92       	push	r0
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	89 83       	std	Y+1, r24	; 0x01
	if(state == DC_MOTOR_CW)
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	81 30       	cpi	r24, 0x01	; 1
     bf2:	59 f4       	brne	.+22     	; 0xc0a <DcMotor_Rotate+0x28>
	{
		/* Rotates the Motor CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
     bf4:	83 e0       	ldi	r24, 0x03	; 3
     bf6:	64 e0       	ldi	r22, 0x04	; 4
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_HIGH);
     bfe:	83 e0       	ldi	r24, 0x03	; 3
     c00:	65 e0       	ldi	r22, 0x05	; 5
     c02:	41 e0       	ldi	r20, 0x01	; 1
     c04:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
     c08:	1b c0       	rjmp	.+54     	; 0xc40 <DcMotor_Rotate+0x5e>


	}
	else if(state == DC_MOTOR_ACW)
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	82 30       	cpi	r24, 0x02	; 2
     c0e:	59 f4       	brne	.+22     	; 0xc26 <DcMotor_Rotate+0x44>
	{
		/* Rotates the Motor A-CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_HIGH);
     c10:	83 e0       	ldi	r24, 0x03	; 3
     c12:	64 e0       	ldi	r22, 0x04	; 4
     c14:	41 e0       	ldi	r20, 0x01	; 1
     c16:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
     c1a:	83 e0       	ldi	r24, 0x03	; 3
     c1c:	65 e0       	ldi	r22, 0x05	; 5
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
     c24:	0d c0       	rjmp	.+26     	; 0xc40 <DcMotor_Rotate+0x5e>


	}
	else if(state == DC_MOTOR_STOP)
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	51 f4       	brne	.+20     	; 0xc40 <DcMotor_Rotate+0x5e>
	{
		/* Stop the Motor */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	64 e0       	ldi	r22, 0x04	; 4
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
     c36:	83 e0       	ldi	r24, 0x03	; 3
     c38:	65 e0       	ldi	r22, 0x05	; 5
     c3a:	40 e0       	ldi	r20, 0x00	; 0
     c3c:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
		/* Invalid Input State - Do Nothing */
	}



}
     c40:	0f 90       	pop	r0
     c42:	cf 91       	pop	r28
     c44:	df 91       	pop	r29
     c46:	08 95       	ret

00000c48 <EEPROM_writeByte>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <EEPROM_writeByte+0x6>
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <EEPROM_writeByte+0x8>
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	9a 83       	std	Y+2, r25	; 0x02
     c56:	89 83       	std	Y+1, r24	; 0x01
     c58:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c5a:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     c5e:	0e 94 39 16 	call	0x2c72	; 0x2c72 <TWI_getStatus>
     c62:	88 30       	cpi	r24, 0x08	; 8
     c64:	11 f0       	breq	.+4      	; 0xc6a <EEPROM_writeByte+0x22>
        return ERROR;
     c66:	1c 82       	std	Y+4, r1	; 0x04
     c68:	28 c0       	rjmp	.+80     	; 0xcba <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	9a 81       	ldd	r25, Y+2	; 0x02
     c6e:	80 70       	andi	r24, 0x00	; 0
     c70:	97 70       	andi	r25, 0x07	; 7
     c72:	88 0f       	add	r24, r24
     c74:	89 2f       	mov	r24, r25
     c76:	88 1f       	adc	r24, r24
     c78:	99 0b       	sbc	r25, r25
     c7a:	91 95       	neg	r25
     c7c:	80 6a       	ori	r24, 0xA0	; 160
     c7e:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     c82:	0e 94 39 16 	call	0x2c72	; 0x2c72 <TWI_getStatus>
     c86:	88 31       	cpi	r24, 0x18	; 24
     c88:	11 f0       	breq	.+4      	; 0xc8e <EEPROM_writeByte+0x46>
        return ERROR; 
     c8a:	1c 82       	std	Y+4, r1	; 0x04
     c8c:	16 c0       	rjmp	.+44     	; 0xcba <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c94:	0e 94 39 16 	call	0x2c72	; 0x2c72 <TWI_getStatus>
     c98:	88 32       	cpi	r24, 0x28	; 40
     c9a:	11 f0       	breq	.+4      	; 0xca0 <EEPROM_writeByte+0x58>
        return ERROR;
     c9c:	1c 82       	std	Y+4, r1	; 0x04
     c9e:	0d c0       	rjmp	.+26     	; 0xcba <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     ca6:	0e 94 39 16 	call	0x2c72	; 0x2c72 <TWI_getStatus>
     caa:	88 32       	cpi	r24, 0x28	; 40
     cac:	11 f0       	breq	.+4      	; 0xcb2 <EEPROM_writeByte+0x6a>
        return ERROR;
     cae:	1c 82       	std	Y+4, r1	; 0x04
     cb0:	04 c0       	rjmp	.+8      	; 0xcba <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     cb2:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <TWI_stop>
	
    return SUCCESS;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	8c 83       	std	Y+4, r24	; 0x04
     cba:	8c 81       	ldd	r24, Y+4	; 0x04
}
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <EEPROM_readByte+0x6>
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <EEPROM_readByte+0x8>
     cd2:	0f 92       	push	r0
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	9a 83       	std	Y+2, r25	; 0x02
     cda:	89 83       	std	Y+1, r24	; 0x01
     cdc:	7c 83       	std	Y+4, r23	; 0x04
     cde:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     ce0:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     ce4:	0e 94 39 16 	call	0x2c72	; 0x2c72 <TWI_getStatus>
     ce8:	88 30       	cpi	r24, 0x08	; 8
     cea:	11 f0       	breq	.+4      	; 0xcf0 <EEPROM_readByte+0x26>
        return ERROR;
     cec:	1d 82       	std	Y+5, r1	; 0x05
     cee:	44 c0       	rjmp	.+136    	; 0xd78 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	9a 81       	ldd	r25, Y+2	; 0x02
     cf4:	80 70       	andi	r24, 0x00	; 0
     cf6:	97 70       	andi	r25, 0x07	; 7
     cf8:	88 0f       	add	r24, r24
     cfa:	89 2f       	mov	r24, r25
     cfc:	88 1f       	adc	r24, r24
     cfe:	99 0b       	sbc	r25, r25
     d00:	91 95       	neg	r25
     d02:	80 6a       	ori	r24, 0xA0	; 160
     d04:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     d08:	0e 94 39 16 	call	0x2c72	; 0x2c72 <TWI_getStatus>
     d0c:	88 31       	cpi	r24, 0x18	; 24
     d0e:	11 f0       	breq	.+4      	; 0xd14 <EEPROM_readByte+0x4a>
        return ERROR;
     d10:	1d 82       	std	Y+5, r1	; 0x05
     d12:	32 c0       	rjmp	.+100    	; 0xd78 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     d1a:	0e 94 39 16 	call	0x2c72	; 0x2c72 <TWI_getStatus>
     d1e:	88 32       	cpi	r24, 0x28	; 40
     d20:	11 f0       	breq	.+4      	; 0xd26 <EEPROM_readByte+0x5c>
        return ERROR;
     d22:	1d 82       	std	Y+5, r1	; 0x05
     d24:	29 c0       	rjmp	.+82     	; 0xd78 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     d26:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     d2a:	0e 94 39 16 	call	0x2c72	; 0x2c72 <TWI_getStatus>
     d2e:	80 31       	cpi	r24, 0x10	; 16
     d30:	11 f0       	breq	.+4      	; 0xd36 <EEPROM_readByte+0x6c>
        return ERROR;
     d32:	1d 82       	std	Y+5, r1	; 0x05
     d34:	21 c0       	rjmp	.+66     	; 0xd78 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	9a 81       	ldd	r25, Y+2	; 0x02
     d3a:	80 70       	andi	r24, 0x00	; 0
     d3c:	97 70       	andi	r25, 0x07	; 7
     d3e:	88 0f       	add	r24, r24
     d40:	89 2f       	mov	r24, r25
     d42:	88 1f       	adc	r24, r24
     d44:	99 0b       	sbc	r25, r25
     d46:	91 95       	neg	r25
     d48:	81 6a       	ori	r24, 0xA1	; 161
     d4a:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     d4e:	0e 94 39 16 	call	0x2c72	; 0x2c72 <TWI_getStatus>
     d52:	80 34       	cpi	r24, 0x40	; 64
     d54:	11 f0       	breq	.+4      	; 0xd5a <EEPROM_readByte+0x90>
        return ERROR;
     d56:	1d 82       	std	Y+5, r1	; 0x05
     d58:	0f c0       	rjmp	.+30     	; 0xd78 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     d5a:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <TWI_readByteWithNACK>
     d5e:	eb 81       	ldd	r30, Y+3	; 0x03
     d60:	fc 81       	ldd	r31, Y+4	; 0x04
     d62:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     d64:	0e 94 39 16 	call	0x2c72	; 0x2c72 <TWI_getStatus>
     d68:	88 35       	cpi	r24, 0x58	; 88
     d6a:	11 f0       	breq	.+4      	; 0xd70 <EEPROM_readByte+0xa6>
        return ERROR;
     d6c:	1d 82       	std	Y+5, r1	; 0x05
     d6e:	04 c0       	rjmp	.+8      	; 0xd78 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     d70:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <TWI_stop>

    return SUCCESS;
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	8d 83       	std	Y+5, r24	; 0x05
     d78:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <GPIO_setupPinDirection+0x6>
     d90:	00 d0       	rcall	.+0      	; 0xd92 <GPIO_setupPinDirection+0x8>
     d92:	0f 92       	push	r0
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	6a 83       	std	Y+2, r22	; 0x02
     d9c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	88 30       	cpi	r24, 0x08	; 8
     da2:	08 f0       	brcs	.+2      	; 0xda6 <GPIO_setupPinDirection+0x1c>
     da4:	d5 c0       	rjmp	.+426    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	84 30       	cpi	r24, 0x04	; 4
     daa:	08 f0       	brcs	.+2      	; 0xdae <GPIO_setupPinDirection+0x24>
     dac:	d1 c0       	rjmp	.+418    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	3d 83       	std	Y+5, r19	; 0x05
     db6:	2c 83       	std	Y+4, r18	; 0x04
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	9d 81       	ldd	r25, Y+5	; 0x05
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	91 05       	cpc	r25, r1
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <GPIO_setupPinDirection+0x3a>
     dc2:	43 c0       	rjmp	.+134    	; 0xe4a <GPIO_setupPinDirection+0xc0>
     dc4:	2c 81       	ldd	r18, Y+4	; 0x04
     dc6:	3d 81       	ldd	r19, Y+5	; 0x05
     dc8:	22 30       	cpi	r18, 0x02	; 2
     dca:	31 05       	cpc	r19, r1
     dcc:	2c f4       	brge	.+10     	; 0xdd8 <GPIO_setupPinDirection+0x4e>
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	9d 81       	ldd	r25, Y+5	; 0x05
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	71 f0       	breq	.+28     	; 0xdf2 <GPIO_setupPinDirection+0x68>
     dd6:	bc c0       	rjmp	.+376    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
     dd8:	2c 81       	ldd	r18, Y+4	; 0x04
     dda:	3d 81       	ldd	r19, Y+5	; 0x05
     ddc:	22 30       	cpi	r18, 0x02	; 2
     dde:	31 05       	cpc	r19, r1
     de0:	09 f4       	brne	.+2      	; 0xde4 <GPIO_setupPinDirection+0x5a>
     de2:	5f c0       	rjmp	.+190    	; 0xea2 <GPIO_setupPinDirection+0x118>
     de4:	8c 81       	ldd	r24, Y+4	; 0x04
     de6:	9d 81       	ldd	r25, Y+5	; 0x05
     de8:	83 30       	cpi	r24, 0x03	; 3
     dea:	91 05       	cpc	r25, r1
     dec:	09 f4       	brne	.+2      	; 0xdf0 <GPIO_setupPinDirection+0x66>
     dee:	85 c0       	rjmp	.+266    	; 0xefa <GPIO_setupPinDirection+0x170>
     df0:	af c0       	rjmp	.+350    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	a1 f4       	brne	.+40     	; 0xe20 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     df8:	aa e3       	ldi	r26, 0x3A	; 58
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	ea e3       	ldi	r30, 0x3A	; 58
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 2e       	mov	r0, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <GPIO_setupPinDirection+0x8c>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <GPIO_setupPinDirection+0x88>
     e1a:	84 2b       	or	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	98 c0       	rjmp	.+304    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e20:	aa e3       	ldi	r26, 0x3A	; 58
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	ea e3       	ldi	r30, 0x3A	; 58
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <GPIO_setupPinDirection+0xb4>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <GPIO_setupPinDirection+0xb0>
     e42:	80 95       	com	r24
     e44:	84 23       	and	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	83 c0       	rjmp	.+262    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	a1 f4       	brne	.+40     	; 0xe78 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     e50:	a7 e3       	ldi	r26, 0x37	; 55
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e7 e3       	ldi	r30, 0x37	; 55
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <GPIO_setupPinDirection+0xe4>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <GPIO_setupPinDirection+0xe0>
     e72:	84 2b       	or	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	6c c0       	rjmp	.+216    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     e78:	a7 e3       	ldi	r26, 0x37	; 55
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e7 e3       	ldi	r30, 0x37	; 55
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 2e       	mov	r0, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <GPIO_setupPinDirection+0x10c>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <GPIO_setupPinDirection+0x108>
     e9a:	80 95       	com	r24
     e9c:	84 23       	and	r24, r20
     e9e:	8c 93       	st	X, r24
     ea0:	57 c0       	rjmp	.+174    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	a1 f4       	brne	.+40     	; 0xed0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     ea8:	a4 e3       	ldi	r26, 0x34	; 52
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e4 e3       	ldi	r30, 0x34	; 52
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <GPIO_setupPinDirection+0x13c>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <GPIO_setupPinDirection+0x138>
     eca:	84 2b       	or	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	40 c0       	rjmp	.+128    	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     ed0:	a4 e3       	ldi	r26, 0x34	; 52
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e4 e3       	ldi	r30, 0x34	; 52
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <GPIO_setupPinDirection+0x164>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <GPIO_setupPinDirection+0x160>
     ef2:	80 95       	com	r24
     ef4:	84 23       	and	r24, r20
     ef6:	8c 93       	st	X, r24
     ef8:	2b c0       	rjmp	.+86     	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	a1 f4       	brne	.+40     	; 0xf28 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     f00:	a1 e3       	ldi	r26, 0x31	; 49
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e1 e3       	ldi	r30, 0x31	; 49
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <GPIO_setupPinDirection+0x194>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <GPIO_setupPinDirection+0x190>
     f22:	84 2b       	or	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	14 c0       	rjmp	.+40     	; 0xf50 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f28:	a1 e3       	ldi	r26, 0x31	; 49
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e1 e3       	ldi	r30, 0x31	; 49
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <GPIO_setupPinDirection+0x1bc>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <GPIO_setupPinDirection+0x1b8>
     f4a:	80 95       	com	r24
     f4c:	84 23       	and	r24, r20
     f4e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	00 d0       	rcall	.+0      	; 0xf66 <GPIO_writePin+0x6>
     f66:	00 d0       	rcall	.+0      	; 0xf68 <GPIO_writePin+0x8>
     f68:	0f 92       	push	r0
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	89 83       	std	Y+1, r24	; 0x01
     f70:	6a 83       	std	Y+2, r22	; 0x02
     f72:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	88 30       	cpi	r24, 0x08	; 8
     f78:	08 f0       	brcs	.+2      	; 0xf7c <GPIO_writePin+0x1c>
     f7a:	d5 c0       	rjmp	.+426    	; 0x1126 <GPIO_writePin+0x1c6>
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	84 30       	cpi	r24, 0x04	; 4
     f80:	08 f0       	brcs	.+2      	; 0xf84 <GPIO_writePin+0x24>
     f82:	d1 c0       	rjmp	.+418    	; 0x1126 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	3d 83       	std	Y+5, r19	; 0x05
     f8c:	2c 83       	std	Y+4, r18	; 0x04
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	91 05       	cpc	r25, r1
     f96:	09 f4       	brne	.+2      	; 0xf9a <GPIO_writePin+0x3a>
     f98:	43 c0       	rjmp	.+134    	; 0x1020 <GPIO_writePin+0xc0>
     f9a:	2c 81       	ldd	r18, Y+4	; 0x04
     f9c:	3d 81       	ldd	r19, Y+5	; 0x05
     f9e:	22 30       	cpi	r18, 0x02	; 2
     fa0:	31 05       	cpc	r19, r1
     fa2:	2c f4       	brge	.+10     	; 0xfae <GPIO_writePin+0x4e>
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	9d 81       	ldd	r25, Y+5	; 0x05
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	71 f0       	breq	.+28     	; 0xfc8 <GPIO_writePin+0x68>
     fac:	bc c0       	rjmp	.+376    	; 0x1126 <GPIO_writePin+0x1c6>
     fae:	2c 81       	ldd	r18, Y+4	; 0x04
     fb0:	3d 81       	ldd	r19, Y+5	; 0x05
     fb2:	22 30       	cpi	r18, 0x02	; 2
     fb4:	31 05       	cpc	r19, r1
     fb6:	09 f4       	brne	.+2      	; 0xfba <GPIO_writePin+0x5a>
     fb8:	5f c0       	rjmp	.+190    	; 0x1078 <GPIO_writePin+0x118>
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	9d 81       	ldd	r25, Y+5	; 0x05
     fbe:	83 30       	cpi	r24, 0x03	; 3
     fc0:	91 05       	cpc	r25, r1
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <GPIO_writePin+0x66>
     fc4:	85 c0       	rjmp	.+266    	; 0x10d0 <GPIO_writePin+0x170>
     fc6:	af c0       	rjmp	.+350    	; 0x1126 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	a1 f4       	brne	.+40     	; 0xff6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     fce:	ab e3       	ldi	r26, 0x3B	; 59
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	eb e3       	ldi	r30, 0x3B	; 59
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <GPIO_writePin+0x8c>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <GPIO_writePin+0x88>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	98 c0       	rjmp	.+304    	; 0x1126 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     ff6:	ab e3       	ldi	r26, 0x3B	; 59
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	eb e3       	ldi	r30, 0x3B	; 59
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <GPIO_writePin+0xb4>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <GPIO_writePin+0xb0>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	83 c0       	rjmp	.+262    	; 0x1126 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	a1 f4       	brne	.+40     	; 0x104e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1026:	a8 e3       	ldi	r26, 0x38	; 56
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e8 e3       	ldi	r30, 0x38	; 56
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <GPIO_writePin+0xe4>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <GPIO_writePin+0xe0>
    1048:	84 2b       	or	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	6c c0       	rjmp	.+216    	; 0x1126 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    104e:	a8 e3       	ldi	r26, 0x38	; 56
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e8 e3       	ldi	r30, 0x38	; 56
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <GPIO_writePin+0x10c>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <GPIO_writePin+0x108>
    1070:	80 95       	com	r24
    1072:	84 23       	and	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	57 c0       	rjmp	.+174    	; 0x1126 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	a1 f4       	brne	.+40     	; 0x10a6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    107e:	a5 e3       	ldi	r26, 0x35	; 53
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e5 e3       	ldi	r30, 0x35	; 53
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <GPIO_writePin+0x13c>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <GPIO_writePin+0x138>
    10a0:	84 2b       	or	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	40 c0       	rjmp	.+128    	; 0x1126 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    10a6:	a5 e3       	ldi	r26, 0x35	; 53
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e5 e3       	ldi	r30, 0x35	; 53
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <GPIO_writePin+0x164>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <GPIO_writePin+0x160>
    10c8:	80 95       	com	r24
    10ca:	84 23       	and	r24, r20
    10cc:	8c 93       	st	X, r24
    10ce:	2b c0       	rjmp	.+86     	; 0x1126 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	a1 f4       	brne	.+40     	; 0x10fe <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    10d6:	a2 e3       	ldi	r26, 0x32	; 50
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e2 e3       	ldi	r30, 0x32	; 50
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <GPIO_writePin+0x194>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <GPIO_writePin+0x190>
    10f8:	84 2b       	or	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	14 c0       	rjmp	.+40     	; 0x1126 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    10fe:	a2 e3       	ldi	r26, 0x32	; 50
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e2 e3       	ldi	r30, 0x32	; 50
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <GPIO_writePin+0x1bc>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <GPIO_writePin+0x1b8>
    1120:	80 95       	com	r24
    1122:	84 23       	and	r24, r20
    1124:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	00 d0       	rcall	.+0      	; 0x113c <GPIO_readPin+0x6>
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPin+0x8>
    113e:	0f 92       	push	r0
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
    1146:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1148:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	88 30       	cpi	r24, 0x08	; 8
    114e:	08 f0       	brcs	.+2      	; 0x1152 <GPIO_readPin+0x1c>
    1150:	84 c0       	rjmp	.+264    	; 0x125a <GPIO_readPin+0x124>
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	84 30       	cpi	r24, 0x04	; 4
    1156:	08 f0       	brcs	.+2      	; 0x115a <GPIO_readPin+0x24>
    1158:	80 c0       	rjmp	.+256    	; 0x125a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	3d 83       	std	Y+5, r19	; 0x05
    1162:	2c 83       	std	Y+4, r18	; 0x04
    1164:	4c 81       	ldd	r20, Y+4	; 0x04
    1166:	5d 81       	ldd	r21, Y+5	; 0x05
    1168:	41 30       	cpi	r20, 0x01	; 1
    116a:	51 05       	cpc	r21, r1
    116c:	79 f1       	breq	.+94     	; 0x11cc <GPIO_readPin+0x96>
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	9d 81       	ldd	r25, Y+5	; 0x05
    1172:	82 30       	cpi	r24, 0x02	; 2
    1174:	91 05       	cpc	r25, r1
    1176:	34 f4       	brge	.+12     	; 0x1184 <GPIO_readPin+0x4e>
    1178:	2c 81       	ldd	r18, Y+4	; 0x04
    117a:	3d 81       	ldd	r19, Y+5	; 0x05
    117c:	21 15       	cp	r18, r1
    117e:	31 05       	cpc	r19, r1
    1180:	69 f0       	breq	.+26     	; 0x119c <GPIO_readPin+0x66>
    1182:	6b c0       	rjmp	.+214    	; 0x125a <GPIO_readPin+0x124>
    1184:	4c 81       	ldd	r20, Y+4	; 0x04
    1186:	5d 81       	ldd	r21, Y+5	; 0x05
    1188:	42 30       	cpi	r20, 0x02	; 2
    118a:	51 05       	cpc	r21, r1
    118c:	b9 f1       	breq	.+110    	; 0x11fc <GPIO_readPin+0xc6>
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	9d 81       	ldd	r25, Y+5	; 0x05
    1192:	83 30       	cpi	r24, 0x03	; 3
    1194:	91 05       	cpc	r25, r1
    1196:	09 f4       	brne	.+2      	; 0x119a <GPIO_readPin+0x64>
    1198:	49 c0       	rjmp	.+146    	; 0x122c <GPIO_readPin+0xf6>
    119a:	5f c0       	rjmp	.+190    	; 0x125a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    119c:	e9 e3       	ldi	r30, 0x39	; 57
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	a9 01       	movw	r20, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <GPIO_readPin+0x7e>
    11b0:	55 95       	asr	r21
    11b2:	47 95       	ror	r20
    11b4:	8a 95       	dec	r24
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <GPIO_readPin+0x7a>
    11b8:	ca 01       	movw	r24, r20
    11ba:	81 70       	andi	r24, 0x01	; 1
    11bc:	90 70       	andi	r25, 0x00	; 0
    11be:	88 23       	and	r24, r24
    11c0:	19 f0       	breq	.+6      	; 0x11c8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	49 c0       	rjmp	.+146    	; 0x125a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11c8:	19 82       	std	Y+1, r1	; 0x01
    11ca:	47 c0       	rjmp	.+142    	; 0x125a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    11cc:	e6 e3       	ldi	r30, 0x36	; 54
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	a9 01       	movw	r20, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <GPIO_readPin+0xae>
    11e0:	55 95       	asr	r21
    11e2:	47 95       	ror	r20
    11e4:	8a 95       	dec	r24
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <GPIO_readPin+0xaa>
    11e8:	ca 01       	movw	r24, r20
    11ea:	81 70       	andi	r24, 0x01	; 1
    11ec:	90 70       	andi	r25, 0x00	; 0
    11ee:	88 23       	and	r24, r24
    11f0:	19 f0       	breq	.+6      	; 0x11f8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	31 c0       	rjmp	.+98     	; 0x125a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11f8:	19 82       	std	Y+1, r1	; 0x01
    11fa:	2f c0       	rjmp	.+94     	; 0x125a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    11fc:	e3 e3       	ldi	r30, 0x33	; 51
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	88 2f       	mov	r24, r24
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	a9 01       	movw	r20, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <GPIO_readPin+0xde>
    1210:	55 95       	asr	r21
    1212:	47 95       	ror	r20
    1214:	8a 95       	dec	r24
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <GPIO_readPin+0xda>
    1218:	ca 01       	movw	r24, r20
    121a:	81 70       	andi	r24, 0x01	; 1
    121c:	90 70       	andi	r25, 0x00	; 0
    121e:	88 23       	and	r24, r24
    1220:	19 f0       	breq	.+6      	; 0x1228 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	19 c0       	rjmp	.+50     	; 0x125a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1228:	19 82       	std	Y+1, r1	; 0x01
    122a:	17 c0       	rjmp	.+46     	; 0x125a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    122c:	e0 e3       	ldi	r30, 0x30	; 48
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	88 2f       	mov	r24, r24
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	a9 01       	movw	r20, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <GPIO_readPin+0x10e>
    1240:	55 95       	asr	r21
    1242:	47 95       	ror	r20
    1244:	8a 95       	dec	r24
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <GPIO_readPin+0x10a>
    1248:	ca 01       	movw	r24, r20
    124a:	81 70       	andi	r24, 0x01	; 1
    124c:	90 70       	andi	r25, 0x00	; 0
    124e:	88 23       	and	r24, r24
    1250:	19 f0       	breq	.+6      	; 0x1258 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	01 c0       	rjmp	.+2      	; 0x125a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1258:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    125a:	89 81       	ldd	r24, Y+1	; 0x01
}
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	00 d0       	rcall	.+0      	; 0x1272 <GPIO_setupPortDirection+0x6>
    1272:	00 d0       	rcall	.+0      	; 0x1274 <GPIO_setupPortDirection+0x8>
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	84 30       	cpi	r24, 0x04	; 4
    1280:	90 f5       	brcc	.+100    	; 0x12e6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	3c 83       	std	Y+4, r19	; 0x04
    128a:	2b 83       	std	Y+3, r18	; 0x03
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	9c 81       	ldd	r25, Y+4	; 0x04
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	91 05       	cpc	r25, r1
    1294:	d1 f0       	breq	.+52     	; 0x12ca <GPIO_setupPortDirection+0x5e>
    1296:	2b 81       	ldd	r18, Y+3	; 0x03
    1298:	3c 81       	ldd	r19, Y+4	; 0x04
    129a:	22 30       	cpi	r18, 0x02	; 2
    129c:	31 05       	cpc	r19, r1
    129e:	2c f4       	brge	.+10     	; 0x12aa <GPIO_setupPortDirection+0x3e>
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	61 f0       	breq	.+24     	; 0x12c0 <GPIO_setupPortDirection+0x54>
    12a8:	1e c0       	rjmp	.+60     	; 0x12e6 <GPIO_setupPortDirection+0x7a>
    12aa:	2b 81       	ldd	r18, Y+3	; 0x03
    12ac:	3c 81       	ldd	r19, Y+4	; 0x04
    12ae:	22 30       	cpi	r18, 0x02	; 2
    12b0:	31 05       	cpc	r19, r1
    12b2:	81 f0       	breq	.+32     	; 0x12d4 <GPIO_setupPortDirection+0x68>
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	91 05       	cpc	r25, r1
    12bc:	81 f0       	breq	.+32     	; 0x12de <GPIO_setupPortDirection+0x72>
    12be:	13 c0       	rjmp	.+38     	; 0x12e6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    12c0:	ea e3       	ldi	r30, 0x3A	; 58
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	80 83       	st	Z, r24
    12c8:	0e c0       	rjmp	.+28     	; 0x12e6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    12ca:	e7 e3       	ldi	r30, 0x37	; 55
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	80 83       	st	Z, r24
    12d2:	09 c0       	rjmp	.+18     	; 0x12e6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    12d4:	e4 e3       	ldi	r30, 0x34	; 52
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	80 83       	st	Z, r24
    12dc:	04 c0       	rjmp	.+8      	; 0x12e6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    12de:	e1 e3       	ldi	r30, 0x31	; 49
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	80 83       	st	Z, r24
			break;
		}
	}
}
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <GPIO_writePort+0x6>
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <GPIO_writePort+0x8>
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	84 30       	cpi	r24, 0x04	; 4
    1308:	90 f5       	brcc	.+100    	; 0x136e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	3c 83       	std	Y+4, r19	; 0x04
    1312:	2b 83       	std	Y+3, r18	; 0x03
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	91 05       	cpc	r25, r1
    131c:	d1 f0       	breq	.+52     	; 0x1352 <GPIO_writePort+0x5e>
    131e:	2b 81       	ldd	r18, Y+3	; 0x03
    1320:	3c 81       	ldd	r19, Y+4	; 0x04
    1322:	22 30       	cpi	r18, 0x02	; 2
    1324:	31 05       	cpc	r19, r1
    1326:	2c f4       	brge	.+10     	; 0x1332 <GPIO_writePort+0x3e>
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	9c 81       	ldd	r25, Y+4	; 0x04
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	61 f0       	breq	.+24     	; 0x1348 <GPIO_writePort+0x54>
    1330:	1e c0       	rjmp	.+60     	; 0x136e <GPIO_writePort+0x7a>
    1332:	2b 81       	ldd	r18, Y+3	; 0x03
    1334:	3c 81       	ldd	r19, Y+4	; 0x04
    1336:	22 30       	cpi	r18, 0x02	; 2
    1338:	31 05       	cpc	r19, r1
    133a:	81 f0       	breq	.+32     	; 0x135c <GPIO_writePort+0x68>
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	83 30       	cpi	r24, 0x03	; 3
    1342:	91 05       	cpc	r25, r1
    1344:	81 f0       	breq	.+32     	; 0x1366 <GPIO_writePort+0x72>
    1346:	13 c0       	rjmp	.+38     	; 0x136e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1348:	eb e3       	ldi	r30, 0x3B	; 59
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	80 83       	st	Z, r24
    1350:	0e c0       	rjmp	.+28     	; 0x136e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1352:	e8 e3       	ldi	r30, 0x38	; 56
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	80 83       	st	Z, r24
    135a:	09 c0       	rjmp	.+18     	; 0x136e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    135c:	e5 e3       	ldi	r30, 0x35	; 53
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	80 83       	st	Z, r24
    1364:	04 c0       	rjmp	.+8      	; 0x136e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1366:	e2 e3       	ldi	r30, 0x32	; 50
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	80 83       	st	Z, r24
			break;
		}
	}
}
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	00 d0       	rcall	.+0      	; 0x1382 <GPIO_readPort+0x6>
    1382:	00 d0       	rcall	.+0      	; 0x1384 <GPIO_readPort+0x8>
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    138a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	84 30       	cpi	r24, 0x04	; 4
    1390:	90 f5       	brcc	.+100    	; 0x13f6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	3c 83       	std	Y+4, r19	; 0x04
    139a:	2b 83       	std	Y+3, r18	; 0x03
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	91 05       	cpc	r25, r1
    13a4:	d1 f0       	breq	.+52     	; 0x13da <GPIO_readPort+0x5e>
    13a6:	2b 81       	ldd	r18, Y+3	; 0x03
    13a8:	3c 81       	ldd	r19, Y+4	; 0x04
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	2c f4       	brge	.+10     	; 0x13ba <GPIO_readPort+0x3e>
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	61 f0       	breq	.+24     	; 0x13d0 <GPIO_readPort+0x54>
    13b8:	1e c0       	rjmp	.+60     	; 0x13f6 <GPIO_readPort+0x7a>
    13ba:	2b 81       	ldd	r18, Y+3	; 0x03
    13bc:	3c 81       	ldd	r19, Y+4	; 0x04
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	31 05       	cpc	r19, r1
    13c2:	81 f0       	breq	.+32     	; 0x13e4 <GPIO_readPort+0x68>
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	83 30       	cpi	r24, 0x03	; 3
    13ca:	91 05       	cpc	r25, r1
    13cc:	81 f0       	breq	.+32     	; 0x13ee <GPIO_readPort+0x72>
    13ce:	13 c0       	rjmp	.+38     	; 0x13f6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    13d0:	e9 e3       	ldi	r30, 0x39	; 57
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	0e c0       	rjmp	.+28     	; 0x13f6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    13da:	e6 e3       	ldi	r30, 0x36	; 54
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	09 c0       	rjmp	.+18     	; 0x13f6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    13e4:	e3 e3       	ldi	r30, 0x33	; 51
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	04 c0       	rjmp	.+8      	; 0x13f6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    13ee:	e0 e3       	ldi	r30, 0x30	; 48
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <__vector_5>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    1406:	1f 92       	push	r1
    1408:	0f 92       	push	r0
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	0f 92       	push	r0
    140e:	11 24       	eor	r1, r1
    1410:	2f 93       	push	r18
    1412:	3f 93       	push	r19
    1414:	4f 93       	push	r20
    1416:	5f 93       	push	r21
    1418:	6f 93       	push	r22
    141a:	7f 93       	push	r23
    141c:	8f 93       	push	r24
    141e:	9f 93       	push	r25
    1420:	af 93       	push	r26
    1422:	bf 93       	push	r27
    1424:	ef 93       	push	r30
    1426:	ff 93       	push	r31
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1430:	80 91 78 00 	lds	r24, 0x0078
    1434:	90 91 79 00 	lds	r25, 0x0079
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	29 f0       	breq	.+10     	; 0x1446 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    143c:	e0 91 78 00 	lds	r30, 0x0078
    1440:	f0 91 79 00 	lds	r31, 0x0079
    1444:	09 95       	icall
	}
}
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	ff 91       	pop	r31
    144c:	ef 91       	pop	r30
    144e:	bf 91       	pop	r27
    1450:	af 91       	pop	r26
    1452:	9f 91       	pop	r25
    1454:	8f 91       	pop	r24
    1456:	7f 91       	pop	r23
    1458:	6f 91       	pop	r22
    145a:	5f 91       	pop	r21
    145c:	4f 91       	pop	r20
    145e:	3f 91       	pop	r19
    1460:	2f 91       	pop	r18
    1462:	0f 90       	pop	r0
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	0f 90       	pop	r0
    1468:	1f 90       	pop	r1
    146a:	18 95       	reti

0000146c <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <Icu_init+0x6>
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	9a 83       	std	Y+2, r25	; 0x02
    1478:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    147a:	a1 e3       	ldi	r26, 0x31	; 49
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e1 e3       	ldi	r30, 0x31	; 49
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8f 7b       	andi	r24, 0xBF	; 191
    1486:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1488:	ef e4       	ldi	r30, 0x4F	; 79
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	8c e0       	ldi	r24, 0x0C	; 12
    148e:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    1490:	ae e4       	ldi	r26, 0x4E	; 78
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	ee e4       	ldi	r30, 0x4E	; 78
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	98 2f       	mov	r25, r24
    149c:	98 7f       	andi	r25, 0xF8	; 248
    149e:	e9 81       	ldd	r30, Y+1	; 0x01
    14a0:	fa 81       	ldd	r31, Y+2	; 0x02
    14a2:	80 81       	ld	r24, Z
    14a4:	89 2b       	or	r24, r25
    14a6:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    14a8:	ae e4       	ldi	r26, 0x4E	; 78
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	ee e4       	ldi	r30, 0x4E	; 78
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	28 2f       	mov	r18, r24
    14b4:	2f 7b       	andi	r18, 0xBF	; 191
    14b6:	e9 81       	ldd	r30, Y+1	; 0x01
    14b8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ba:	81 81       	ldd	r24, Z+1	; 0x01
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	00 24       	eor	r0, r0
    14c2:	96 95       	lsr	r25
    14c4:	87 95       	ror	r24
    14c6:	07 94       	ror	r0
    14c8:	96 95       	lsr	r25
    14ca:	87 95       	ror	r24
    14cc:	07 94       	ror	r0
    14ce:	98 2f       	mov	r25, r24
    14d0:	80 2d       	mov	r24, r0
    14d2:	82 2b       	or	r24, r18
    14d4:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    14d6:	ec e4       	ldi	r30, 0x4C	; 76
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	11 82       	std	Z+1, r1	; 0x01
    14dc:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    14de:	e6 e4       	ldi	r30, 0x46	; 70
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	11 82       	std	Z+1, r1	; 0x01
    14e4:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    14e6:	a9 e5       	ldi	r26, 0x59	; 89
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e9 e5       	ldi	r30, 0x59	; 89
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	80 62       	ori	r24, 0x20	; 32
    14f2:	8c 93       	st	X, r24
}
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_setCallBack(void(*a_ptr)(void))
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	00 d0       	rcall	.+0      	; 0x1504 <Icu_setCallBack+0x6>
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	9a 83       	std	Y+2, r25	; 0x02
    150a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	9a 81       	ldd	r25, Y+2	; 0x02
    1510:	90 93 79 00 	sts	0x0079, r25
    1514:	80 93 78 00 	sts	0x0078, r24
}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <Icu_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	0f 92       	push	r0
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    152e:	ae e4       	ldi	r26, 0x4E	; 78
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	ee e4       	ldi	r30, 0x4E	; 78
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	28 2f       	mov	r18, r24
    153a:	2f 7b       	andi	r18, 0xBF	; 191
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	00 24       	eor	r0, r0
    1544:	96 95       	lsr	r25
    1546:	87 95       	ror	r24
    1548:	07 94       	ror	r0
    154a:	96 95       	lsr	r25
    154c:	87 95       	ror	r24
    154e:	07 94       	ror	r0
    1550:	98 2f       	mov	r25, r24
    1552:	80 2d       	mov	r24, r0
    1554:	82 2b       	or	r24, r18
    1556:	8c 93       	st	X, r24
}
    1558:	0f 90       	pop	r0
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <Icu_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 Icu_getInputCaptureValue(void)
{
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1568:	e6 e4       	ldi	r30, 0x46	; 70
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <Icu_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Icu_clearTimerValue(void)
{
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    157e:	ec e4       	ldi	r30, 0x4C	; 76
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	11 82       	std	Z+1, r1	; 0x01
    1584:	10 82       	st	Z, r1
}
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <Icu_DeInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void Icu_DeInit(void)
{
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1594:	ef e4       	ldi	r30, 0x4F	; 79
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	10 82       	st	Z, r1
	TCCR1B = 0;
    159a:	ee e4       	ldi	r30, 0x4E	; 78
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	10 82       	st	Z, r1
	TCNT1 = 0;
    15a0:	ec e4       	ldi	r30, 0x4C	; 76
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	11 82       	std	Z+1, r1	; 0x01
    15a6:	10 82       	st	Z, r1
	ICR1 = 0;
    15a8:	e6 e4       	ldi	r30, 0x46	; 70
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	11 82       	std	Z+1, r1	; 0x01
    15ae:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    15b0:	a9 e5       	ldi	r26, 0x59	; 89
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e9 e5       	ldi	r30, 0x59	; 89
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	8f 7d       	andi	r24, 0xDF	; 223
    15bc:	8c 93       	st	X, r24
}
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	64 e0       	ldi	r22, 0x04	; 4
    15d0:	41 e0       	ldi	r20, 0x01	; 1
    15d2:	0e 94 c5 06 	call	0xd8a	; 0xd8a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	65 e0       	ldi	r22, 0x05	; 5
    15da:	41 e0       	ldi	r20, 0x01	; 1
    15dc:	0e 94 c5 06 	call	0xd8a	; 0xd8a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	66 e0       	ldi	r22, 0x06	; 6
    15e4:	41 e0       	ldi	r20, 0x01	; 1
    15e6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	6f ef       	ldi	r22, 0xFF	; 255
    15ee:	0e 94 36 09 	call	0x126c	; 0x126c <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    15f2:	88 e3       	ldi	r24, 0x38	; 56
    15f4:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    15f8:	8c e0       	ldi	r24, 0x0C	; 12
    15fa:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_sendCommand>
}
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	e9 97       	sbiw	r28, 0x39	; 57
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	64 e0       	ldi	r22, 0x04	; 4
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	65 e0       	ldi	r22, 0x05	; 5
    162e:	40 e0       	ldi	r20, 0x00	; 0
    1630:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	a0 e8       	ldi	r26, 0x80	; 128
    163a:	bf e3       	ldi	r27, 0x3F	; 63
    163c:	8d ab       	std	Y+53, r24	; 0x35
    163e:	9e ab       	std	Y+54, r25	; 0x36
    1640:	af ab       	std	Y+55, r26	; 0x37
    1642:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1644:	6d a9       	ldd	r22, Y+53	; 0x35
    1646:	7e a9       	ldd	r23, Y+54	; 0x36
    1648:	8f a9       	ldd	r24, Y+55	; 0x37
    164a:	98 ad       	ldd	r25, Y+56	; 0x38
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	4a e7       	ldi	r20, 0x7A	; 122
    1652:	53 e4       	ldi	r21, 0x43	; 67
    1654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	89 ab       	std	Y+49, r24	; 0x31
    165e:	9a ab       	std	Y+50, r25	; 0x32
    1660:	ab ab       	std	Y+51, r26	; 0x33
    1662:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1664:	69 a9       	ldd	r22, Y+49	; 0x31
    1666:	7a a9       	ldd	r23, Y+50	; 0x32
    1668:	8b a9       	ldd	r24, Y+51	; 0x33
    166a:	9c a9       	ldd	r25, Y+52	; 0x34
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	40 e8       	ldi	r20, 0x80	; 128
    1672:	5f e3       	ldi	r21, 0x3F	; 63
    1674:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1678:	88 23       	and	r24, r24
    167a:	2c f4       	brge	.+10     	; 0x1686 <LCD_sendCommand+0x7c>
		__ticks = 1;
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	98 ab       	std	Y+48, r25	; 0x30
    1682:	8f a7       	std	Y+47, r24	; 0x2f
    1684:	3f c0       	rjmp	.+126    	; 0x1704 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1686:	69 a9       	ldd	r22, Y+49	; 0x31
    1688:	7a a9       	ldd	r23, Y+50	; 0x32
    168a:	8b a9       	ldd	r24, Y+51	; 0x33
    168c:	9c a9       	ldd	r25, Y+52	; 0x34
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	3f ef       	ldi	r19, 0xFF	; 255
    1692:	4f e7       	ldi	r20, 0x7F	; 127
    1694:	57 e4       	ldi	r21, 0x47	; 71
    1696:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    169a:	18 16       	cp	r1, r24
    169c:	4c f5       	brge	.+82     	; 0x16f0 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169e:	6d a9       	ldd	r22, Y+53	; 0x35
    16a0:	7e a9       	ldd	r23, Y+54	; 0x36
    16a2:	8f a9       	ldd	r24, Y+55	; 0x37
    16a4:	98 ad       	ldd	r25, Y+56	; 0x38
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e2       	ldi	r20, 0x20	; 32
    16ac:	51 e4       	ldi	r21, 0x41	; 65
    16ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	bc 01       	movw	r22, r24
    16b8:	cd 01       	movw	r24, r26
    16ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	98 ab       	std	Y+48, r25	; 0x30
    16c4:	8f a7       	std	Y+47, r24	; 0x2f
    16c6:	0f c0       	rjmp	.+30     	; 0x16e6 <LCD_sendCommand+0xdc>
    16c8:	89 e1       	ldi	r24, 0x19	; 25
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	9e a7       	std	Y+46, r25	; 0x2e
    16ce:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    16d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <LCD_sendCommand+0xca>
    16d8:	9e a7       	std	Y+46, r25	; 0x2e
    16da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    16de:	98 a9       	ldd	r25, Y+48	; 0x30
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	98 ab       	std	Y+48, r25	; 0x30
    16e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    16e8:	98 a9       	ldd	r25, Y+48	; 0x30
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	69 f7       	brne	.-38     	; 0x16c8 <LCD_sendCommand+0xbe>
    16ee:	14 c0       	rjmp	.+40     	; 0x1718 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f0:	69 a9       	ldd	r22, Y+49	; 0x31
    16f2:	7a a9       	ldd	r23, Y+50	; 0x32
    16f4:	8b a9       	ldd	r24, Y+51	; 0x33
    16f6:	9c a9       	ldd	r25, Y+52	; 0x34
    16f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	98 ab       	std	Y+48, r25	; 0x30
    1702:	8f a7       	std	Y+47, r24	; 0x2f
    1704:	8f a5       	ldd	r24, Y+47	; 0x2f
    1706:	98 a9       	ldd	r25, Y+48	; 0x30
    1708:	9c a7       	std	Y+44, r25	; 0x2c
    170a:	8b a7       	std	Y+43, r24	; 0x2b
    170c:	8b a5       	ldd	r24, Y+43	; 0x2b
    170e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	f1 f7       	brne	.-4      	; 0x1710 <LCD_sendCommand+0x106>
    1714:	9c a7       	std	Y+44, r25	; 0x2c
    1716:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	66 e0       	ldi	r22, 0x06	; 6
    171c:	41 e0       	ldi	r20, 0x01	; 1
    171e:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	a0 e8       	ldi	r26, 0x80	; 128
    1728:	bf e3       	ldi	r27, 0x3F	; 63
    172a:	8f a3       	std	Y+39, r24	; 0x27
    172c:	98 a7       	std	Y+40, r25	; 0x28
    172e:	a9 a7       	std	Y+41, r26	; 0x29
    1730:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1732:	6f a1       	ldd	r22, Y+39	; 0x27
    1734:	78 a5       	ldd	r23, Y+40	; 0x28
    1736:	89 a5       	ldd	r24, Y+41	; 0x29
    1738:	9a a5       	ldd	r25, Y+42	; 0x2a
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	4a e7       	ldi	r20, 0x7A	; 122
    1740:	53 e4       	ldi	r21, 0x43	; 67
    1742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	8b a3       	std	Y+35, r24	; 0x23
    174c:	9c a3       	std	Y+36, r25	; 0x24
    174e:	ad a3       	std	Y+37, r26	; 0x25
    1750:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1752:	6b a1       	ldd	r22, Y+35	; 0x23
    1754:	7c a1       	ldd	r23, Y+36	; 0x24
    1756:	8d a1       	ldd	r24, Y+37	; 0x25
    1758:	9e a1       	ldd	r25, Y+38	; 0x26
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 e8       	ldi	r20, 0x80	; 128
    1760:	5f e3       	ldi	r21, 0x3F	; 63
    1762:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1766:	88 23       	and	r24, r24
    1768:	2c f4       	brge	.+10     	; 0x1774 <LCD_sendCommand+0x16a>
		__ticks = 1;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	9a a3       	std	Y+34, r25	; 0x22
    1770:	89 a3       	std	Y+33, r24	; 0x21
    1772:	3f c0       	rjmp	.+126    	; 0x17f2 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1774:	6b a1       	ldd	r22, Y+35	; 0x23
    1776:	7c a1       	ldd	r23, Y+36	; 0x24
    1778:	8d a1       	ldd	r24, Y+37	; 0x25
    177a:	9e a1       	ldd	r25, Y+38	; 0x26
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	3f ef       	ldi	r19, 0xFF	; 255
    1780:	4f e7       	ldi	r20, 0x7F	; 127
    1782:	57 e4       	ldi	r21, 0x47	; 71
    1784:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1788:	18 16       	cp	r1, r24
    178a:	4c f5       	brge	.+82     	; 0x17de <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    178c:	6f a1       	ldd	r22, Y+39	; 0x27
    178e:	78 a5       	ldd	r23, Y+40	; 0x28
    1790:	89 a5       	ldd	r24, Y+41	; 0x29
    1792:	9a a5       	ldd	r25, Y+42	; 0x2a
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e2       	ldi	r20, 0x20	; 32
    179a:	51 e4       	ldi	r21, 0x41	; 65
    179c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	bc 01       	movw	r22, r24
    17a6:	cd 01       	movw	r24, r26
    17a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	9a a3       	std	Y+34, r25	; 0x22
    17b2:	89 a3       	std	Y+33, r24	; 0x21
    17b4:	0f c0       	rjmp	.+30     	; 0x17d4 <LCD_sendCommand+0x1ca>
    17b6:	89 e1       	ldi	r24, 0x19	; 25
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	98 a3       	std	Y+32, r25	; 0x20
    17bc:	8f 8f       	std	Y+31, r24	; 0x1f
    17be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17c0:	98 a1       	ldd	r25, Y+32	; 0x20
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <LCD_sendCommand+0x1b8>
    17c6:	98 a3       	std	Y+32, r25	; 0x20
    17c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ca:	89 a1       	ldd	r24, Y+33	; 0x21
    17cc:	9a a1       	ldd	r25, Y+34	; 0x22
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	9a a3       	std	Y+34, r25	; 0x22
    17d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d4:	89 a1       	ldd	r24, Y+33	; 0x21
    17d6:	9a a1       	ldd	r25, Y+34	; 0x22
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	69 f7       	brne	.-38     	; 0x17b6 <LCD_sendCommand+0x1ac>
    17dc:	14 c0       	rjmp	.+40     	; 0x1806 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17de:	6b a1       	ldd	r22, Y+35	; 0x23
    17e0:	7c a1       	ldd	r23, Y+36	; 0x24
    17e2:	8d a1       	ldd	r24, Y+37	; 0x25
    17e4:	9e a1       	ldd	r25, Y+38	; 0x26
    17e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	9a a3       	std	Y+34, r25	; 0x22
    17f0:	89 a3       	std	Y+33, r24	; 0x21
    17f2:	89 a1       	ldd	r24, Y+33	; 0x21
    17f4:	9a a1       	ldd	r25, Y+34	; 0x22
    17f6:	9e 8f       	std	Y+30, r25	; 0x1e
    17f8:	8d 8f       	std	Y+29, r24	; 0x1d
    17fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	f1 f7       	brne	.-4      	; 0x17fe <LCD_sendCommand+0x1f4>
    1802:	9e 8f       	std	Y+30, r25	; 0x1e
    1804:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	69 ad       	ldd	r22, Y+57	; 0x39
    180a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <GPIO_writePort>
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	a0 e8       	ldi	r26, 0x80	; 128
    1814:	bf e3       	ldi	r27, 0x3F	; 63
    1816:	89 8f       	std	Y+25, r24	; 0x19
    1818:	9a 8f       	std	Y+26, r25	; 0x1a
    181a:	ab 8f       	std	Y+27, r26	; 0x1b
    181c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181e:	69 8d       	ldd	r22, Y+25	; 0x19
    1820:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1822:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1824:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	4a e7       	ldi	r20, 0x7A	; 122
    182c:	53 e4       	ldi	r21, 0x43	; 67
    182e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	8d 8b       	std	Y+21, r24	; 0x15
    1838:	9e 8b       	std	Y+22, r25	; 0x16
    183a:	af 8b       	std	Y+23, r26	; 0x17
    183c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    183e:	6d 89       	ldd	r22, Y+21	; 0x15
    1840:	7e 89       	ldd	r23, Y+22	; 0x16
    1842:	8f 89       	ldd	r24, Y+23	; 0x17
    1844:	98 8d       	ldd	r25, Y+24	; 0x18
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e8       	ldi	r20, 0x80	; 128
    184c:	5f e3       	ldi	r21, 0x3F	; 63
    184e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1852:	88 23       	and	r24, r24
    1854:	2c f4       	brge	.+10     	; 0x1860 <LCD_sendCommand+0x256>
		__ticks = 1;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	9c 8b       	std	Y+20, r25	; 0x14
    185c:	8b 8b       	std	Y+19, r24	; 0x13
    185e:	3f c0       	rjmp	.+126    	; 0x18de <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1860:	6d 89       	ldd	r22, Y+21	; 0x15
    1862:	7e 89       	ldd	r23, Y+22	; 0x16
    1864:	8f 89       	ldd	r24, Y+23	; 0x17
    1866:	98 8d       	ldd	r25, Y+24	; 0x18
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	3f ef       	ldi	r19, 0xFF	; 255
    186c:	4f e7       	ldi	r20, 0x7F	; 127
    186e:	57 e4       	ldi	r21, 0x47	; 71
    1870:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1874:	18 16       	cp	r1, r24
    1876:	4c f5       	brge	.+82     	; 0x18ca <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1878:	69 8d       	ldd	r22, Y+25	; 0x19
    187a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    187c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    187e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e2       	ldi	r20, 0x20	; 32
    1886:	51 e4       	ldi	r21, 0x41	; 65
    1888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	bc 01       	movw	r22, r24
    1892:	cd 01       	movw	r24, r26
    1894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	9c 8b       	std	Y+20, r25	; 0x14
    189e:	8b 8b       	std	Y+19, r24	; 0x13
    18a0:	0f c0       	rjmp	.+30     	; 0x18c0 <LCD_sendCommand+0x2b6>
    18a2:	89 e1       	ldi	r24, 0x19	; 25
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	9a 8b       	std	Y+18, r25	; 0x12
    18a8:	89 8b       	std	Y+17, r24	; 0x11
    18aa:	89 89       	ldd	r24, Y+17	; 0x11
    18ac:	9a 89       	ldd	r25, Y+18	; 0x12
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <LCD_sendCommand+0x2a4>
    18b2:	9a 8b       	std	Y+18, r25	; 0x12
    18b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b6:	8b 89       	ldd	r24, Y+19	; 0x13
    18b8:	9c 89       	ldd	r25, Y+20	; 0x14
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	9c 8b       	std	Y+20, r25	; 0x14
    18be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c0:	8b 89       	ldd	r24, Y+19	; 0x13
    18c2:	9c 89       	ldd	r25, Y+20	; 0x14
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	69 f7       	brne	.-38     	; 0x18a2 <LCD_sendCommand+0x298>
    18c8:	14 c0       	rjmp	.+40     	; 0x18f2 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ca:	6d 89       	ldd	r22, Y+21	; 0x15
    18cc:	7e 89       	ldd	r23, Y+22	; 0x16
    18ce:	8f 89       	ldd	r24, Y+23	; 0x17
    18d0:	98 8d       	ldd	r25, Y+24	; 0x18
    18d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	9c 8b       	std	Y+20, r25	; 0x14
    18dc:	8b 8b       	std	Y+19, r24	; 0x13
    18de:	8b 89       	ldd	r24, Y+19	; 0x13
    18e0:	9c 89       	ldd	r25, Y+20	; 0x14
    18e2:	98 8b       	std	Y+16, r25	; 0x10
    18e4:	8f 87       	std	Y+15, r24	; 0x0f
    18e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e8:	98 89       	ldd	r25, Y+16	; 0x10
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <LCD_sendCommand+0x2e0>
    18ee:	98 8b       	std	Y+16, r25	; 0x10
    18f0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	66 e0       	ldi	r22, 0x06	; 6
    18f6:	40 e0       	ldi	r20, 0x00	; 0
    18f8:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	a0 e8       	ldi	r26, 0x80	; 128
    1902:	bf e3       	ldi	r27, 0x3F	; 63
    1904:	8b 87       	std	Y+11, r24	; 0x0b
    1906:	9c 87       	std	Y+12, r25	; 0x0c
    1908:	ad 87       	std	Y+13, r26	; 0x0d
    190a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190c:	6b 85       	ldd	r22, Y+11	; 0x0b
    190e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1910:	8d 85       	ldd	r24, Y+13	; 0x0d
    1912:	9e 85       	ldd	r25, Y+14	; 0x0e
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	4a e7       	ldi	r20, 0x7A	; 122
    191a:	53 e4       	ldi	r21, 0x43	; 67
    191c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	8f 83       	std	Y+7, r24	; 0x07
    1926:	98 87       	std	Y+8, r25	; 0x08
    1928:	a9 87       	std	Y+9, r26	; 0x09
    192a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    192c:	6f 81       	ldd	r22, Y+7	; 0x07
    192e:	78 85       	ldd	r23, Y+8	; 0x08
    1930:	89 85       	ldd	r24, Y+9	; 0x09
    1932:	9a 85       	ldd	r25, Y+10	; 0x0a
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e8       	ldi	r20, 0x80	; 128
    193a:	5f e3       	ldi	r21, 0x3F	; 63
    193c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1940:	88 23       	and	r24, r24
    1942:	2c f4       	brge	.+10     	; 0x194e <LCD_sendCommand+0x344>
		__ticks = 1;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	9e 83       	std	Y+6, r25	; 0x06
    194a:	8d 83       	std	Y+5, r24	; 0x05
    194c:	3f c0       	rjmp	.+126    	; 0x19cc <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    194e:	6f 81       	ldd	r22, Y+7	; 0x07
    1950:	78 85       	ldd	r23, Y+8	; 0x08
    1952:	89 85       	ldd	r24, Y+9	; 0x09
    1954:	9a 85       	ldd	r25, Y+10	; 0x0a
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	3f ef       	ldi	r19, 0xFF	; 255
    195a:	4f e7       	ldi	r20, 0x7F	; 127
    195c:	57 e4       	ldi	r21, 0x47	; 71
    195e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1962:	18 16       	cp	r1, r24
    1964:	4c f5       	brge	.+82     	; 0x19b8 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1966:	6b 85       	ldd	r22, Y+11	; 0x0b
    1968:	7c 85       	ldd	r23, Y+12	; 0x0c
    196a:	8d 85       	ldd	r24, Y+13	; 0x0d
    196c:	9e 85       	ldd	r25, Y+14	; 0x0e
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e2       	ldi	r20, 0x20	; 32
    1974:	51 e4       	ldi	r21, 0x41	; 65
    1976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	bc 01       	movw	r22, r24
    1980:	cd 01       	movw	r24, r26
    1982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	9e 83       	std	Y+6, r25	; 0x06
    198c:	8d 83       	std	Y+5, r24	; 0x05
    198e:	0f c0       	rjmp	.+30     	; 0x19ae <LCD_sendCommand+0x3a4>
    1990:	89 e1       	ldi	r24, 0x19	; 25
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	9c 83       	std	Y+4, r25	; 0x04
    1996:	8b 83       	std	Y+3, r24	; 0x03
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	9c 81       	ldd	r25, Y+4	; 0x04
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <LCD_sendCommand+0x392>
    19a0:	9c 83       	std	Y+4, r25	; 0x04
    19a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a4:	8d 81       	ldd	r24, Y+5	; 0x05
    19a6:	9e 81       	ldd	r25, Y+6	; 0x06
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	9e 83       	std	Y+6, r25	; 0x06
    19ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	9e 81       	ldd	r25, Y+6	; 0x06
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	69 f7       	brne	.-38     	; 0x1990 <LCD_sendCommand+0x386>
    19b6:	14 c0       	rjmp	.+40     	; 0x19e0 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ba:	78 85       	ldd	r23, Y+8	; 0x08
    19bc:	89 85       	ldd	r24, Y+9	; 0x09
    19be:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	9e 83       	std	Y+6, r25	; 0x06
    19ca:	8d 83       	std	Y+5, r24	; 0x05
    19cc:	8d 81       	ldd	r24, Y+5	; 0x05
    19ce:	9e 81       	ldd	r25, Y+6	; 0x06
    19d0:	9a 83       	std	Y+2, r25	; 0x02
    19d2:	89 83       	std	Y+1, r24	; 0x01
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	9a 81       	ldd	r25, Y+2	; 0x02
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <LCD_sendCommand+0x3ce>
    19dc:	9a 83       	std	Y+2, r25	; 0x02
    19de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    19e0:	e9 96       	adiw	r28, 0x39	; 57
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	e9 97       	sbiw	r28, 0x39	; 57
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	64 e0       	ldi	r22, 0x04	; 4
    1a0c:	41 e0       	ldi	r20, 0x01	; 1
    1a0e:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	65 e0       	ldi	r22, 0x05	; 5
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	a0 e8       	ldi	r26, 0x80	; 128
    1a22:	bf e3       	ldi	r27, 0x3F	; 63
    1a24:	8d ab       	std	Y+53, r24	; 0x35
    1a26:	9e ab       	std	Y+54, r25	; 0x36
    1a28:	af ab       	std	Y+55, r26	; 0x37
    1a2a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a2e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a30:	8f a9       	ldd	r24, Y+55	; 0x37
    1a32:	98 ad       	ldd	r25, Y+56	; 0x38
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	4a e7       	ldi	r20, 0x7A	; 122
    1a3a:	53 e4       	ldi	r21, 0x43	; 67
    1a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	89 ab       	std	Y+49, r24	; 0x31
    1a46:	9a ab       	std	Y+50, r25	; 0x32
    1a48:	ab ab       	std	Y+51, r26	; 0x33
    1a4a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a4c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a4e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a50:	8b a9       	ldd	r24, Y+51	; 0x33
    1a52:	9c a9       	ldd	r25, Y+52	; 0x34
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e8       	ldi	r20, 0x80	; 128
    1a5a:	5f e3       	ldi	r21, 0x3F	; 63
    1a5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a60:	88 23       	and	r24, r24
    1a62:	2c f4       	brge	.+10     	; 0x1a6e <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	98 ab       	std	Y+48, r25	; 0x30
    1a6a:	8f a7       	std	Y+47, r24	; 0x2f
    1a6c:	3f c0       	rjmp	.+126    	; 0x1aec <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1a6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a70:	7a a9       	ldd	r23, Y+50	; 0x32
    1a72:	8b a9       	ldd	r24, Y+51	; 0x33
    1a74:	9c a9       	ldd	r25, Y+52	; 0x34
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	3f ef       	ldi	r19, 0xFF	; 255
    1a7a:	4f e7       	ldi	r20, 0x7F	; 127
    1a7c:	57 e4       	ldi	r21, 0x47	; 71
    1a7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a82:	18 16       	cp	r1, r24
    1a84:	4c f5       	brge	.+82     	; 0x1ad8 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a86:	6d a9       	ldd	r22, Y+53	; 0x35
    1a88:	7e a9       	ldd	r23, Y+54	; 0x36
    1a8a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a8c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e2       	ldi	r20, 0x20	; 32
    1a94:	51 e4       	ldi	r21, 0x41	; 65
    1a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	bc 01       	movw	r22, r24
    1aa0:	cd 01       	movw	r24, r26
    1aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	98 ab       	std	Y+48, r25	; 0x30
    1aac:	8f a7       	std	Y+47, r24	; 0x2f
    1aae:	0f c0       	rjmp	.+30     	; 0x1ace <LCD_displayCharacter+0xdc>
    1ab0:	89 e1       	ldi	r24, 0x19	; 25
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	9e a7       	std	Y+46, r25	; 0x2e
    1ab6:	8d a7       	std	Y+45, r24	; 0x2d
    1ab8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aba:	9e a5       	ldd	r25, Y+46	; 0x2e
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	f1 f7       	brne	.-4      	; 0x1abc <LCD_displayCharacter+0xca>
    1ac0:	9e a7       	std	Y+46, r25	; 0x2e
    1ac2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ac6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	98 ab       	std	Y+48, r25	; 0x30
    1acc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ace:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ad0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	69 f7       	brne	.-38     	; 0x1ab0 <LCD_displayCharacter+0xbe>
    1ad6:	14 c0       	rjmp	.+40     	; 0x1b00 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad8:	69 a9       	ldd	r22, Y+49	; 0x31
    1ada:	7a a9       	ldd	r23, Y+50	; 0x32
    1adc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ade:	9c a9       	ldd	r25, Y+52	; 0x34
    1ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	98 ab       	std	Y+48, r25	; 0x30
    1aea:	8f a7       	std	Y+47, r24	; 0x2f
    1aec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aee:	98 a9       	ldd	r25, Y+48	; 0x30
    1af0:	9c a7       	std	Y+44, r25	; 0x2c
    1af2:	8b a7       	std	Y+43, r24	; 0x2b
    1af4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1af6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <LCD_displayCharacter+0x106>
    1afc:	9c a7       	std	Y+44, r25	; 0x2c
    1afe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	66 e0       	ldi	r22, 0x06	; 6
    1b04:	41 e0       	ldi	r20, 0x01	; 1
    1b06:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	a0 e8       	ldi	r26, 0x80	; 128
    1b10:	bf e3       	ldi	r27, 0x3F	; 63
    1b12:	8f a3       	std	Y+39, r24	; 0x27
    1b14:	98 a7       	std	Y+40, r25	; 0x28
    1b16:	a9 a7       	std	Y+41, r26	; 0x29
    1b18:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b1c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b1e:	89 a5       	ldd	r24, Y+41	; 0x29
    1b20:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	4a e7       	ldi	r20, 0x7A	; 122
    1b28:	53 e4       	ldi	r21, 0x43	; 67
    1b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	8b a3       	std	Y+35, r24	; 0x23
    1b34:	9c a3       	std	Y+36, r25	; 0x24
    1b36:	ad a3       	std	Y+37, r26	; 0x25
    1b38:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b40:	9e a1       	ldd	r25, Y+38	; 0x26
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e8       	ldi	r20, 0x80	; 128
    1b48:	5f e3       	ldi	r21, 0x3F	; 63
    1b4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b4e:	88 23       	and	r24, r24
    1b50:	2c f4       	brge	.+10     	; 0x1b5c <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	9a a3       	std	Y+34, r25	; 0x22
    1b58:	89 a3       	std	Y+33, r24	; 0x21
    1b5a:	3f c0       	rjmp	.+126    	; 0x1bda <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1b5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b60:	8d a1       	ldd	r24, Y+37	; 0x25
    1b62:	9e a1       	ldd	r25, Y+38	; 0x26
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	3f ef       	ldi	r19, 0xFF	; 255
    1b68:	4f e7       	ldi	r20, 0x7F	; 127
    1b6a:	57 e4       	ldi	r21, 0x47	; 71
    1b6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b70:	18 16       	cp	r1, r24
    1b72:	4c f5       	brge	.+82     	; 0x1bc6 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b74:	6f a1       	ldd	r22, Y+39	; 0x27
    1b76:	78 a5       	ldd	r23, Y+40	; 0x28
    1b78:	89 a5       	ldd	r24, Y+41	; 0x29
    1b7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e2       	ldi	r20, 0x20	; 32
    1b82:	51 e4       	ldi	r21, 0x41	; 65
    1b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	9a a3       	std	Y+34, r25	; 0x22
    1b9a:	89 a3       	std	Y+33, r24	; 0x21
    1b9c:	0f c0       	rjmp	.+30     	; 0x1bbc <LCD_displayCharacter+0x1ca>
    1b9e:	89 e1       	ldi	r24, 0x19	; 25
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	98 a3       	std	Y+32, r25	; 0x20
    1ba4:	8f 8f       	std	Y+31, r24	; 0x1f
    1ba6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ba8:	98 a1       	ldd	r25, Y+32	; 0x20
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <LCD_displayCharacter+0x1b8>
    1bae:	98 a3       	std	Y+32, r25	; 0x20
    1bb0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	9a a3       	std	Y+34, r25	; 0x22
    1bba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbc:	89 a1       	ldd	r24, Y+33	; 0x21
    1bbe:	9a a1       	ldd	r25, Y+34	; 0x22
    1bc0:	00 97       	sbiw	r24, 0x00	; 0
    1bc2:	69 f7       	brne	.-38     	; 0x1b9e <LCD_displayCharacter+0x1ac>
    1bc4:	14 c0       	rjmp	.+40     	; 0x1bee <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc6:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bca:	8d a1       	ldd	r24, Y+37	; 0x25
    1bcc:	9e a1       	ldd	r25, Y+38	; 0x26
    1bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	9a a3       	std	Y+34, r25	; 0x22
    1bd8:	89 a3       	std	Y+33, r24	; 0x21
    1bda:	89 a1       	ldd	r24, Y+33	; 0x21
    1bdc:	9a a1       	ldd	r25, Y+34	; 0x22
    1bde:	9e 8f       	std	Y+30, r25	; 0x1e
    1be0:	8d 8f       	std	Y+29, r24	; 0x1d
    1be2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1be4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <LCD_displayCharacter+0x1f4>
    1bea:	9e 8f       	std	Y+30, r25	; 0x1e
    1bec:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	69 ad       	ldd	r22, Y+57	; 0x39
    1bf2:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <GPIO_writePort>
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	a0 e8       	ldi	r26, 0x80	; 128
    1bfc:	bf e3       	ldi	r27, 0x3F	; 63
    1bfe:	89 8f       	std	Y+25, r24	; 0x19
    1c00:	9a 8f       	std	Y+26, r25	; 0x1a
    1c02:	ab 8f       	std	Y+27, r26	; 0x1b
    1c04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c06:	69 8d       	ldd	r22, Y+25	; 0x19
    1c08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	4a e7       	ldi	r20, 0x7A	; 122
    1c14:	53 e4       	ldi	r21, 0x43	; 67
    1c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	8d 8b       	std	Y+21, r24	; 0x15
    1c20:	9e 8b       	std	Y+22, r25	; 0x16
    1c22:	af 8b       	std	Y+23, r26	; 0x17
    1c24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c26:	6d 89       	ldd	r22, Y+21	; 0x15
    1c28:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e8       	ldi	r20, 0x80	; 128
    1c34:	5f e3       	ldi	r21, 0x3F	; 63
    1c36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c3a:	88 23       	and	r24, r24
    1c3c:	2c f4       	brge	.+10     	; 0x1c48 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	9c 8b       	std	Y+20, r25	; 0x14
    1c44:	8b 8b       	std	Y+19, r24	; 0x13
    1c46:	3f c0       	rjmp	.+126    	; 0x1cc6 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1c48:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	3f ef       	ldi	r19, 0xFF	; 255
    1c54:	4f e7       	ldi	r20, 0x7F	; 127
    1c56:	57 e4       	ldi	r21, 0x47	; 71
    1c58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c5c:	18 16       	cp	r1, r24
    1c5e:	4c f5       	brge	.+82     	; 0x1cb2 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c60:	69 8d       	ldd	r22, Y+25	; 0x19
    1c62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e2       	ldi	r20, 0x20	; 32
    1c6e:	51 e4       	ldi	r21, 0x41	; 65
    1c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	bc 01       	movw	r22, r24
    1c7a:	cd 01       	movw	r24, r26
    1c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	9c 8b       	std	Y+20, r25	; 0x14
    1c86:	8b 8b       	std	Y+19, r24	; 0x13
    1c88:	0f c0       	rjmp	.+30     	; 0x1ca8 <LCD_displayCharacter+0x2b6>
    1c8a:	89 e1       	ldi	r24, 0x19	; 25
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	9a 8b       	std	Y+18, r25	; 0x12
    1c90:	89 8b       	std	Y+17, r24	; 0x11
    1c92:	89 89       	ldd	r24, Y+17	; 0x11
    1c94:	9a 89       	ldd	r25, Y+18	; 0x12
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_displayCharacter+0x2a4>
    1c9a:	9a 8b       	std	Y+18, r25	; 0x12
    1c9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	9c 8b       	std	Y+20, r25	; 0x14
    1ca6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca8:	8b 89       	ldd	r24, Y+19	; 0x13
    1caa:	9c 89       	ldd	r25, Y+20	; 0x14
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	69 f7       	brne	.-38     	; 0x1c8a <LCD_displayCharacter+0x298>
    1cb0:	14 c0       	rjmp	.+40     	; 0x1cda <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	9c 8b       	std	Y+20, r25	; 0x14
    1cc4:	8b 8b       	std	Y+19, r24	; 0x13
    1cc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cca:	98 8b       	std	Y+16, r25	; 0x10
    1ccc:	8f 87       	std	Y+15, r24	; 0x0f
    1cce:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd0:	98 89       	ldd	r25, Y+16	; 0x10
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <LCD_displayCharacter+0x2e0>
    1cd6:	98 8b       	std	Y+16, r25	; 0x10
    1cd8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	66 e0       	ldi	r22, 0x06	; 6
    1cde:	40 e0       	ldi	r20, 0x00	; 0
    1ce0:	0e 94 b0 07 	call	0xf60	; 0xf60 <GPIO_writePin>
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	a0 e8       	ldi	r26, 0x80	; 128
    1cea:	bf e3       	ldi	r27, 0x3F	; 63
    1cec:	8b 87       	std	Y+11, r24	; 0x0b
    1cee:	9c 87       	std	Y+12, r25	; 0x0c
    1cf0:	ad 87       	std	Y+13, r26	; 0x0d
    1cf2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	4a e7       	ldi	r20, 0x7A	; 122
    1d02:	53 e4       	ldi	r21, 0x43	; 67
    1d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	8f 83       	std	Y+7, r24	; 0x07
    1d0e:	98 87       	std	Y+8, r25	; 0x08
    1d10:	a9 87       	std	Y+9, r26	; 0x09
    1d12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d14:	6f 81       	ldd	r22, Y+7	; 0x07
    1d16:	78 85       	ldd	r23, Y+8	; 0x08
    1d18:	89 85       	ldd	r24, Y+9	; 0x09
    1d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e8       	ldi	r20, 0x80	; 128
    1d22:	5f e3       	ldi	r21, 0x3F	; 63
    1d24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d28:	88 23       	and	r24, r24
    1d2a:	2c f4       	brge	.+10     	; 0x1d36 <LCD_displayCharacter+0x344>
		__ticks = 1;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	8d 83       	std	Y+5, r24	; 0x05
    1d34:	3f c0       	rjmp	.+126    	; 0x1db4 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1d36:	6f 81       	ldd	r22, Y+7	; 0x07
    1d38:	78 85       	ldd	r23, Y+8	; 0x08
    1d3a:	89 85       	ldd	r24, Y+9	; 0x09
    1d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	3f ef       	ldi	r19, 0xFF	; 255
    1d42:	4f e7       	ldi	r20, 0x7F	; 127
    1d44:	57 e4       	ldi	r21, 0x47	; 71
    1d46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d4a:	18 16       	cp	r1, r24
    1d4c:	4c f5       	brge	.+82     	; 0x1da0 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e2       	ldi	r20, 0x20	; 32
    1d5c:	51 e4       	ldi	r21, 0x41	; 65
    1d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	bc 01       	movw	r22, r24
    1d68:	cd 01       	movw	r24, r26
    1d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	9e 83       	std	Y+6, r25	; 0x06
    1d74:	8d 83       	std	Y+5, r24	; 0x05
    1d76:	0f c0       	rjmp	.+30     	; 0x1d96 <LCD_displayCharacter+0x3a4>
    1d78:	89 e1       	ldi	r24, 0x19	; 25
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9c 83       	std	Y+4, r25	; 0x04
    1d7e:	8b 83       	std	Y+3, r24	; 0x03
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	9c 81       	ldd	r25, Y+4	; 0x04
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <LCD_displayCharacter+0x392>
    1d88:	9c 83       	std	Y+4, r25	; 0x04
    1d8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d96:	8d 81       	ldd	r24, Y+5	; 0x05
    1d98:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	69 f7       	brne	.-38     	; 0x1d78 <LCD_displayCharacter+0x386>
    1d9e:	14 c0       	rjmp	.+40     	; 0x1dc8 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da0:	6f 81       	ldd	r22, Y+7	; 0x07
    1da2:	78 85       	ldd	r23, Y+8	; 0x08
    1da4:	89 85       	ldd	r24, Y+9	; 0x09
    1da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	9e 83       	std	Y+6, r25	; 0x06
    1db2:	8d 83       	std	Y+5, r24	; 0x05
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	9a 83       	std	Y+2, r25	; 0x02
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LCD_displayCharacter+0x3ce>
    1dc4:	9a 83       	std	Y+2, r25	; 0x02
    1dc6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1dc8:	e9 96       	adiw	r28, 0x39	; 57
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	de bf       	out	0x3e, r29	; 62
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	cd bf       	out	0x3d, r28	; 61
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <LCD_displayString+0x6>
    1de0:	0f 92       	push	r0
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	9b 83       	std	Y+3, r25	; 0x03
    1de8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1dea:	19 82       	std	Y+1, r1	; 0x01
    1dec:	0e c0       	rjmp	.+28     	; 0x1e0a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	9b 81       	ldd	r25, Y+3	; 0x03
    1df8:	fc 01       	movw	r30, r24
    1dfa:	e2 0f       	add	r30, r18
    1dfc:	f3 1f       	adc	r31, r19
    1dfe:	80 81       	ld	r24, Z
    1e00:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <LCD_displayCharacter>
		i++;
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	8f 5f       	subi	r24, 0xFF	; 255
    1e08:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	9b 81       	ldd	r25, Y+3	; 0x03
    1e14:	fc 01       	movw	r30, r24
    1e16:	e2 0f       	add	r30, r18
    1e18:	f3 1f       	adc	r31, r19
    1e1a:	80 81       	ld	r24, Z
    1e1c:	88 23       	and	r24, r24
    1e1e:	39 f7       	brne	.-50     	; 0x1dee <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <LCD_moveCursor+0x6>
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <LCD_moveCursor+0x8>
    1e34:	0f 92       	push	r0
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	8a 83       	std	Y+2, r24	; 0x02
    1e3c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	3d 83       	std	Y+5, r19	; 0x05
    1e46:	2c 83       	std	Y+4, r18	; 0x04
    1e48:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4c:	81 30       	cpi	r24, 0x01	; 1
    1e4e:	91 05       	cpc	r25, r1
    1e50:	c1 f0       	breq	.+48     	; 0x1e82 <LCD_moveCursor+0x56>
    1e52:	2c 81       	ldd	r18, Y+4	; 0x04
    1e54:	3d 81       	ldd	r19, Y+5	; 0x05
    1e56:	22 30       	cpi	r18, 0x02	; 2
    1e58:	31 05       	cpc	r19, r1
    1e5a:	2c f4       	brge	.+10     	; 0x1e66 <LCD_moveCursor+0x3a>
    1e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	61 f0       	breq	.+24     	; 0x1e7c <LCD_moveCursor+0x50>
    1e64:	19 c0       	rjmp	.+50     	; 0x1e98 <LCD_moveCursor+0x6c>
    1e66:	2c 81       	ldd	r18, Y+4	; 0x04
    1e68:	3d 81       	ldd	r19, Y+5	; 0x05
    1e6a:	22 30       	cpi	r18, 0x02	; 2
    1e6c:	31 05       	cpc	r19, r1
    1e6e:	69 f0       	breq	.+26     	; 0x1e8a <LCD_moveCursor+0x5e>
    1e70:	8c 81       	ldd	r24, Y+4	; 0x04
    1e72:	9d 81       	ldd	r25, Y+5	; 0x05
    1e74:	83 30       	cpi	r24, 0x03	; 3
    1e76:	91 05       	cpc	r25, r1
    1e78:	61 f0       	breq	.+24     	; 0x1e92 <LCD_moveCursor+0x66>
    1e7a:	0e c0       	rjmp	.+28     	; 0x1e98 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	89 83       	std	Y+1, r24	; 0x01
    1e80:	0b c0       	rjmp	.+22     	; 0x1e98 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	80 5c       	subi	r24, 0xC0	; 192
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	07 c0       	rjmp	.+14     	; 0x1e98 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	80 5f       	subi	r24, 0xF0	; 240
    1e8e:	89 83       	std	Y+1, r24	; 0x01
    1e90:	03 c0       	rjmp	.+6      	; 0x1e98 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	80 5b       	subi	r24, 0xB0	; 176
    1e96:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	80 68       	ori	r24, 0x80	; 128
    1e9c:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_sendCommand>
}
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <LCD_displayStringRowColumn+0x6>
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <LCD_displayStringRowColumn+0x8>
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	6a 83       	std	Y+2, r22	; 0x02
    1ec0:	5c 83       	std	Y+4, r21	; 0x04
    1ec2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ec8:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_displayString>
}
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	62 97       	sbiw	r28, 0x12	; 18
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	9a 8b       	std	Y+18, r25	; 0x12
    1ef8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1efa:	89 89       	ldd	r24, Y+17	; 0x11
    1efc:	9a 89       	ldd	r25, Y+18	; 0x12
    1efe:	9e 01       	movw	r18, r28
    1f00:	2f 5f       	subi	r18, 0xFF	; 255
    1f02:	3f 4f       	sbci	r19, 0xFF	; 255
    1f04:	b9 01       	movw	r22, r18
    1f06:	4a e0       	ldi	r20, 0x0A	; 10
    1f08:	50 e0       	ldi	r21, 0x00	; 0
    1f0a:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <itoa>
   LCD_displayString(buff); /* Display the string */
    1f0e:	ce 01       	movw	r24, r28
    1f10:	01 96       	adiw	r24, 0x01	; 1
    1f12:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_displayString>
}
    1f16:	62 96       	adiw	r28, 0x12	; 18
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	de bf       	out	0x3e, r29	; 62
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	cd bf       	out	0x3d, r28	; 61
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_sendCommand>
}
    1f36:	cf 91       	pop	r28
    1f38:	df 91       	pop	r29
    1f3a:	08 95       	ret

00001f3c <main>:

/*******************************************************************************
 *                              MAIN Function                                  *
 *******************************************************************************/

int main(void){
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	61 97       	sbiw	r28, 0x11	; 17
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61

	SREG  |= (1<<7);
    1f50:	af e5       	ldi	r26, 0x5F	; 95
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	ef e5       	ldi	r30, 0x5F	; 95
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	80 68       	ori	r24, 0x80	; 128
    1f5c:	8c 93       	st	X, r24

	I2c_ConfigType config2 = {400,0x00000001};
    1f5e:	ce 01       	movw	r24, r28
    1f60:	01 96       	adiw	r24, 0x01	; 1
    1f62:	9e 87       	std	Y+14, r25	; 0x0e
    1f64:	8d 87       	std	Y+13, r24	; 0x0d
    1f66:	e8 e6       	ldi	r30, 0x68	; 104
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	f8 8b       	std	Y+16, r31	; 0x10
    1f6c:	ef 87       	std	Y+15, r30	; 0x0f
    1f6e:	f8 e0       	ldi	r31, 0x08	; 8
    1f70:	f9 8b       	std	Y+17, r31	; 0x11
    1f72:	ef 85       	ldd	r30, Y+15	; 0x0f
    1f74:	f8 89       	ldd	r31, Y+16	; 0x10
    1f76:	00 80       	ld	r0, Z
    1f78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f7a:	98 89       	ldd	r25, Y+16	; 0x10
    1f7c:	01 96       	adiw	r24, 0x01	; 1
    1f7e:	98 8b       	std	Y+16, r25	; 0x10
    1f80:	8f 87       	std	Y+15, r24	; 0x0f
    1f82:	ed 85       	ldd	r30, Y+13	; 0x0d
    1f84:	fe 85       	ldd	r31, Y+14	; 0x0e
    1f86:	00 82       	st	Z, r0
    1f88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8c:	01 96       	adiw	r24, 0x01	; 1
    1f8e:	9e 87       	std	Y+14, r25	; 0x0e
    1f90:	8d 87       	std	Y+13, r24	; 0x0d
    1f92:	99 89       	ldd	r25, Y+17	; 0x11
    1f94:	91 50       	subi	r25, 0x01	; 1
    1f96:	99 8b       	std	Y+17, r25	; 0x11
    1f98:	e9 89       	ldd	r30, Y+17	; 0x11
    1f9a:	ee 23       	and	r30, r30
    1f9c:	51 f7       	brne	.-44     	; 0x1f72 <main+0x36>
	/* Initialize the TWI/I2C Driver */
	TWI_init(&config2);
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	01 96       	adiw	r24, 0x01	; 1
    1fa2:	0e 94 82 15 	call	0x2b04	; 0x2b04 <TWI_init>

	BUZZER_init();
    1fa6:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUZZER_init>

	UART_ConfigType config={EIGHT,DISABLED,ONE_1,ASYNC_NORMAL_MODE};
    1faa:	83 e0       	ldi	r24, 0x03	; 3
    1fac:	89 87       	std	Y+9, r24	; 0x09
    1fae:	1a 86       	std	Y+10, r1	; 0x0a
    1fb0:	1b 86       	std	Y+11, r1	; 0x0b
    1fb2:	88 e0       	ldi	r24, 0x08	; 8
    1fb4:	8c 87       	std	Y+12, r24	; 0x0c
	UART_init(9600, &config);
    1fb6:	9e 01       	movw	r18, r28
    1fb8:	27 5f       	subi	r18, 0xF7	; 247
    1fba:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbc:	60 e8       	ldi	r22, 0x80	; 128
    1fbe:	75 e2       	ldi	r23, 0x25	; 37
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	a9 01       	movw	r20, r18
    1fc6:	0e 94 48 16 	call	0x2c90	; 0x2c90 <UART_init>

	DcMotor_Init();
    1fca:	0e 94 cc 05 	call	0xb98	; 0xb98 <DcMotor_Init>


	while(1){

	//	do{
			pass_matching();
    1fce:	0e 94 a8 11 	call	0x2350	; 0x2350 <pass_matching>
	//	}while(g_flag2);
		/* iterate until the password is right*/
		do{
			pass_matching2();
    1fd2:	0e 94 51 12 	call	0x24a2	; 0x24a2 <pass_matching2>

			if(UART_recieveByte()){
    1fd6:	0e 94 e7 16 	call	0x2dce	; 0x2dce <UART_recieveByte>
    1fda:	88 23       	and	r24, r24
    1fdc:	49 f0       	breq	.+18     	; 0x1ff0 <main+0xb4>
				if(UART_recieveByte()){
    1fde:	0e 94 e7 16 	call	0x2dce	; 0x2dce <UART_recieveByte>
    1fe2:	88 23       	and	r24, r24
    1fe4:	19 f0       	breq	.+6      	; 0x1fec <main+0xb0>
					dc_motor_operations();
    1fe6:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dc_motor_operations>
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <main+0xb4>
				}
				else{
					buzzer_operations();
    1fec:	0e 94 9f 14 	call	0x293e	; 0x293e <buzzer_operations>
				}
			}
		}while(!g_flag);
    1ff0:	80 91 7a 00 	lds	r24, 0x007A
    1ff4:	88 23       	and	r24, r24
    1ff6:	69 f3       	breq	.-38     	; 0x1fd2 <main+0x96>
    1ff8:	ea cf       	rjmp	.-44     	; 0x1fce <main+0x92>

00001ffa <recieve_pass>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

/*  Function Description
 *  receive the password from microcontroller1*/
void recieve_pass(uint8 r_pass[PASS_SIZE]){
    1ffa:	0f 93       	push	r16
    1ffc:	1f 93       	push	r17
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	00 d0       	rcall	.+0      	; 0x2004 <recieve_pass+0xa>
    2004:	00 d0       	rcall	.+0      	; 0x2006 <recieve_pass+0xc>
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	9c 83       	std	Y+4, r25	; 0x04
    200c:	8b 83       	std	Y+3, r24	; 0x03
	for (int var = 0; var < PASS_SIZE; ++var) {
    200e:	1a 82       	std	Y+2, r1	; 0x02
    2010:	19 82       	std	Y+1, r1	; 0x01
    2012:	10 c0       	rjmp	.+32     	; 0x2034 <recieve_pass+0x3a>
		r_pass[var]=UART_recieveByte();
    2014:	29 81       	ldd	r18, Y+1	; 0x01
    2016:	3a 81       	ldd	r19, Y+2	; 0x02
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	9c 81       	ldd	r25, Y+4	; 0x04
    201c:	8c 01       	movw	r16, r24
    201e:	02 0f       	add	r16, r18
    2020:	13 1f       	adc	r17, r19
    2022:	0e 94 e7 16 	call	0x2dce	; 0x2dce <UART_recieveByte>
    2026:	f8 01       	movw	r30, r16
    2028:	80 83       	st	Z, r24
 *******************************************************************************/

/*  Function Description
 *  receive the password from microcontroller1*/
void recieve_pass(uint8 r_pass[PASS_SIZE]){
	for (int var = 0; var < PASS_SIZE; ++var) {
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	9a 81       	ldd	r25, Y+2	; 0x02
    202e:	01 96       	adiw	r24, 0x01	; 1
    2030:	9a 83       	std	Y+2, r25	; 0x02
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	9a 81       	ldd	r25, Y+2	; 0x02
    2038:	85 30       	cpi	r24, 0x05	; 5
    203a:	91 05       	cpc	r25, r1
    203c:	5c f3       	brlt	.-42     	; 0x2014 <recieve_pass+0x1a>
		r_pass[var]=UART_recieveByte();
	}
}
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	1f 91       	pop	r17
    204c:	0f 91       	pop	r16
    204e:	08 95       	ret

00002050 <store_pass>:

/*  Function Description
 *  save the pass in the eeprom */
void store_pass(void){
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	60 97       	sbiw	r28, 0x10	; 16
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
	for (int var = 0; var < PASS_SIZE; ++var) {
    2064:	18 8a       	std	Y+16, r1	; 0x10
    2066:	1f 86       	std	Y+15, r1	; 0x0f
    2068:	86 c0       	rjmp	.+268    	; 0x2176 <store_pass+0x126>
		EEPROM_writeByte((0x0311+var), pass[var]);
    206a:	8f 85       	ldd	r24, Y+15	; 0x0f
    206c:	98 89       	ldd	r25, Y+16	; 0x10
    206e:	8f 5e       	subi	r24, 0xEF	; 239
    2070:	9c 4f       	sbci	r25, 0xFC	; 252
    2072:	9c 01       	movw	r18, r24
    2074:	8f 85       	ldd	r24, Y+15	; 0x0f
    2076:	98 89       	ldd	r25, Y+16	; 0x10
    2078:	fc 01       	movw	r30, r24
    207a:	e1 58       	subi	r30, 0x81	; 129
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	40 81       	ld	r20, Z
    2080:	c9 01       	movw	r24, r18
    2082:	64 2f       	mov	r22, r20
    2084:	0e 94 24 06 	call	0xc48	; 0xc48 <EEPROM_writeByte>
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	a8 ec       	ldi	r26, 0xC8	; 200
    208e:	b2 e4       	ldi	r27, 0x42	; 66
    2090:	8b 87       	std	Y+11, r24	; 0x0b
    2092:	9c 87       	std	Y+12, r25	; 0x0c
    2094:	ad 87       	std	Y+13, r26	; 0x0d
    2096:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2098:	6b 85       	ldd	r22, Y+11	; 0x0b
    209a:	7c 85       	ldd	r23, Y+12	; 0x0c
    209c:	8d 85       	ldd	r24, Y+13	; 0x0d
    209e:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	4a e7       	ldi	r20, 0x7A	; 122
    20a6:	53 e4       	ldi	r21, 0x43	; 67
    20a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	8f 83       	std	Y+7, r24	; 0x07
    20b2:	98 87       	std	Y+8, r25	; 0x08
    20b4:	a9 87       	std	Y+9, r26	; 0x09
    20b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ba:	78 85       	ldd	r23, Y+8	; 0x08
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e8       	ldi	r20, 0x80	; 128
    20c6:	5f e3       	ldi	r21, 0x3F	; 63
    20c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20cc:	88 23       	and	r24, r24
    20ce:	2c f4       	brge	.+10     	; 0x20da <store_pass+0x8a>
		__ticks = 1;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	9e 83       	std	Y+6, r25	; 0x06
    20d6:	8d 83       	std	Y+5, r24	; 0x05
    20d8:	3f c0       	rjmp	.+126    	; 0x2158 <store_pass+0x108>
	else if (__tmp > 65535)
    20da:	6f 81       	ldd	r22, Y+7	; 0x07
    20dc:	78 85       	ldd	r23, Y+8	; 0x08
    20de:	89 85       	ldd	r24, Y+9	; 0x09
    20e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	3f ef       	ldi	r19, 0xFF	; 255
    20e6:	4f e7       	ldi	r20, 0x7F	; 127
    20e8:	57 e4       	ldi	r21, 0x47	; 71
    20ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ee:	18 16       	cp	r1, r24
    20f0:	4c f5       	brge	.+82     	; 0x2144 <store_pass+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e2       	ldi	r20, 0x20	; 32
    2100:	51 e4       	ldi	r21, 0x41	; 65
    2102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	bc 01       	movw	r22, r24
    210c:	cd 01       	movw	r24, r26
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	8d 83       	std	Y+5, r24	; 0x05
    211a:	0f c0       	rjmp	.+30     	; 0x213a <store_pass+0xea>
    211c:	89 e1       	ldi	r24, 0x19	; 25
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9c 83       	std	Y+4, r25	; 0x04
    2122:	8b 83       	std	Y+3, r24	; 0x03
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	9c 81       	ldd	r25, Y+4	; 0x04
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	f1 f7       	brne	.-4      	; 0x2128 <store_pass+0xd8>
    212c:	9c 83       	std	Y+4, r25	; 0x04
    212e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2130:	8d 81       	ldd	r24, Y+5	; 0x05
    2132:	9e 81       	ldd	r25, Y+6	; 0x06
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	9e 83       	std	Y+6, r25	; 0x06
    2138:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213a:	8d 81       	ldd	r24, Y+5	; 0x05
    213c:	9e 81       	ldd	r25, Y+6	; 0x06
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	69 f7       	brne	.-38     	; 0x211c <store_pass+0xcc>
    2142:	14 c0       	rjmp	.+40     	; 0x216c <store_pass+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2144:	6f 81       	ldd	r22, Y+7	; 0x07
    2146:	78 85       	ldd	r23, Y+8	; 0x08
    2148:	89 85       	ldd	r24, Y+9	; 0x09
    214a:	9a 85       	ldd	r25, Y+10	; 0x0a
    214c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	9e 83       	std	Y+6, r25	; 0x06
    2156:	8d 83       	std	Y+5, r24	; 0x05
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	9e 81       	ldd	r25, Y+6	; 0x06
    215c:	9a 83       	std	Y+2, r25	; 0x02
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	9a 81       	ldd	r25, Y+2	; 0x02
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <store_pass+0x114>
    2168:	9a 83       	std	Y+2, r25	; 0x02
    216a:	89 83       	std	Y+1, r24	; 0x01
}

/*  Function Description
 *  save the pass in the eeprom */
void store_pass(void){
	for (int var = 0; var < PASS_SIZE; ++var) {
    216c:	8f 85       	ldd	r24, Y+15	; 0x0f
    216e:	98 89       	ldd	r25, Y+16	; 0x10
    2170:	01 96       	adiw	r24, 0x01	; 1
    2172:	98 8b       	std	Y+16, r25	; 0x10
    2174:	8f 87       	std	Y+15, r24	; 0x0f
    2176:	8f 85       	ldd	r24, Y+15	; 0x0f
    2178:	98 89       	ldd	r25, Y+16	; 0x10
    217a:	85 30       	cpi	r24, 0x05	; 5
    217c:	91 05       	cpc	r25, r1
    217e:	0c f4       	brge	.+2      	; 0x2182 <store_pass+0x132>
    2180:	74 cf       	rjmp	.-280    	; 0x206a <store_pass+0x1a>
		EEPROM_writeByte((0x0311+var), pass[var]);
		_delay_ms(100);
	}
}
    2182:	60 96       	adiw	r28, 0x10	; 16
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	08 95       	ret

00002194 <return_pass>:

/* Function Description
 * read the password from the eeprom*/
void return_pass(uint8 re_pass[PASS_SIZE]){
    2194:	df 93       	push	r29
    2196:	cf 93       	push	r28
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
    219c:	62 97       	sbiw	r28, 0x12	; 18
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	9a 8b       	std	Y+18, r25	; 0x12
    21aa:	89 8b       	std	Y+17, r24	; 0x11
	for (int var = 0; var < PASS_SIZE; ++var) {
    21ac:	18 8a       	std	Y+16, r1	; 0x10
    21ae:	1f 86       	std	Y+15, r1	; 0x0f
    21b0:	86 c0       	rjmp	.+268    	; 0x22be <return_pass+0x12a>
		EEPROM_readByte((0x0311+var), &re_pass[var]);
    21b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b4:	98 89       	ldd	r25, Y+16	; 0x10
    21b6:	8f 5e       	subi	r24, 0xEF	; 239
    21b8:	9c 4f       	sbci	r25, 0xFC	; 252
    21ba:	ac 01       	movw	r20, r24
    21bc:	2f 85       	ldd	r18, Y+15	; 0x0f
    21be:	38 89       	ldd	r19, Y+16	; 0x10
    21c0:	89 89       	ldd	r24, Y+17	; 0x11
    21c2:	9a 89       	ldd	r25, Y+18	; 0x12
    21c4:	28 0f       	add	r18, r24
    21c6:	39 1f       	adc	r19, r25
    21c8:	ca 01       	movw	r24, r20
    21ca:	b9 01       	movw	r22, r18
    21cc:	0e 94 65 06 	call	0xcca	; 0xcca <EEPROM_readByte>
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	a8 e4       	ldi	r26, 0x48	; 72
    21d6:	b3 e4       	ldi	r27, 0x43	; 67
    21d8:	8b 87       	std	Y+11, r24	; 0x0b
    21da:	9c 87       	std	Y+12, r25	; 0x0c
    21dc:	ad 87       	std	Y+13, r26	; 0x0d
    21de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	4a e7       	ldi	r20, 0x7A	; 122
    21ee:	53 e4       	ldi	r21, 0x43	; 67
    21f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	8f 83       	std	Y+7, r24	; 0x07
    21fa:	98 87       	std	Y+8, r25	; 0x08
    21fc:	a9 87       	std	Y+9, r26	; 0x09
    21fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2200:	6f 81       	ldd	r22, Y+7	; 0x07
    2202:	78 85       	ldd	r23, Y+8	; 0x08
    2204:	89 85       	ldd	r24, Y+9	; 0x09
    2206:	9a 85       	ldd	r25, Y+10	; 0x0a
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e8       	ldi	r20, 0x80	; 128
    220e:	5f e3       	ldi	r21, 0x3F	; 63
    2210:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2214:	88 23       	and	r24, r24
    2216:	2c f4       	brge	.+10     	; 0x2222 <return_pass+0x8e>
		__ticks = 1;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9e 83       	std	Y+6, r25	; 0x06
    221e:	8d 83       	std	Y+5, r24	; 0x05
    2220:	3f c0       	rjmp	.+126    	; 0x22a0 <return_pass+0x10c>
	else if (__tmp > 65535)
    2222:	6f 81       	ldd	r22, Y+7	; 0x07
    2224:	78 85       	ldd	r23, Y+8	; 0x08
    2226:	89 85       	ldd	r24, Y+9	; 0x09
    2228:	9a 85       	ldd	r25, Y+10	; 0x0a
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	3f ef       	ldi	r19, 0xFF	; 255
    222e:	4f e7       	ldi	r20, 0x7F	; 127
    2230:	57 e4       	ldi	r21, 0x47	; 71
    2232:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2236:	18 16       	cp	r1, r24
    2238:	4c f5       	brge	.+82     	; 0x228c <return_pass+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223a:	6b 85       	ldd	r22, Y+11	; 0x0b
    223c:	7c 85       	ldd	r23, Y+12	; 0x0c
    223e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2240:	9e 85       	ldd	r25, Y+14	; 0x0e
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e2       	ldi	r20, 0x20	; 32
    2248:	51 e4       	ldi	r21, 0x41	; 65
    224a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	9e 83       	std	Y+6, r25	; 0x06
    2260:	8d 83       	std	Y+5, r24	; 0x05
    2262:	0f c0       	rjmp	.+30     	; 0x2282 <return_pass+0xee>
    2264:	89 e1       	ldi	r24, 0x19	; 25
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9c 83       	std	Y+4, r25	; 0x04
    226a:	8b 83       	std	Y+3, r24	; 0x03
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	9c 81       	ldd	r25, Y+4	; 0x04
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <return_pass+0xdc>
    2274:	9c 83       	std	Y+4, r25	; 0x04
    2276:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2278:	8d 81       	ldd	r24, Y+5	; 0x05
    227a:	9e 81       	ldd	r25, Y+6	; 0x06
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	9e 83       	std	Y+6, r25	; 0x06
    2280:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2282:	8d 81       	ldd	r24, Y+5	; 0x05
    2284:	9e 81       	ldd	r25, Y+6	; 0x06
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	69 f7       	brne	.-38     	; 0x2264 <return_pass+0xd0>
    228a:	14 c0       	rjmp	.+40     	; 0x22b4 <return_pass+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228c:	6f 81       	ldd	r22, Y+7	; 0x07
    228e:	78 85       	ldd	r23, Y+8	; 0x08
    2290:	89 85       	ldd	r24, Y+9	; 0x09
    2292:	9a 85       	ldd	r25, Y+10	; 0x0a
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	9e 83       	std	Y+6, r25	; 0x06
    229e:	8d 83       	std	Y+5, r24	; 0x05
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
    22a2:	9e 81       	ldd	r25, Y+6	; 0x06
    22a4:	9a 83       	std	Y+2, r25	; 0x02
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	9a 81       	ldd	r25, Y+2	; 0x02
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <return_pass+0x118>
    22b0:	9a 83       	std	Y+2, r25	; 0x02
    22b2:	89 83       	std	Y+1, r24	; 0x01
}

/* Function Description
 * read the password from the eeprom*/
void return_pass(uint8 re_pass[PASS_SIZE]){
	for (int var = 0; var < PASS_SIZE; ++var) {
    22b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22b6:	98 89       	ldd	r25, Y+16	; 0x10
    22b8:	01 96       	adiw	r24, 0x01	; 1
    22ba:	98 8b       	std	Y+16, r25	; 0x10
    22bc:	8f 87       	std	Y+15, r24	; 0x0f
    22be:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c0:	98 89       	ldd	r25, Y+16	; 0x10
    22c2:	85 30       	cpi	r24, 0x05	; 5
    22c4:	91 05       	cpc	r25, r1
    22c6:	0c f4       	brge	.+2      	; 0x22ca <return_pass+0x136>
    22c8:	74 cf       	rjmp	.-280    	; 0x21b2 <return_pass+0x1e>
		EEPROM_readByte((0x0311+var), &re_pass[var]);
		_delay_ms(200);
	}
}
    22ca:	62 96       	adiw	r28, 0x12	; 18
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	08 95       	ret

000022dc <match>:

/* Function Description
 * check if the two passwords match */
uint8 match(uint8 p[PASS_SIZE], uint8 p2[PASS_SIZE]){
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	27 97       	sbiw	r28, 0x07	; 7
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
    22f0:	9d 83       	std	Y+5, r25	; 0x05
    22f2:	8c 83       	std	Y+4, r24	; 0x04
    22f4:	7f 83       	std	Y+7, r23	; 0x07
    22f6:	6e 83       	std	Y+6, r22	; 0x06
	uint8 flag = 1; /* assume they match */
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	8b 83       	std	Y+3, r24	; 0x03
	for (int var = 0; var < PASS_SIZE; ++var) {
    22fc:	1a 82       	std	Y+2, r1	; 0x02
    22fe:	19 82       	std	Y+1, r1	; 0x01
    2300:	18 c0       	rjmp	.+48     	; 0x2332 <match+0x56>
		if(p[var]!=p2[var]){
    2302:	29 81       	ldd	r18, Y+1	; 0x01
    2304:	3a 81       	ldd	r19, Y+2	; 0x02
    2306:	8c 81       	ldd	r24, Y+4	; 0x04
    2308:	9d 81       	ldd	r25, Y+5	; 0x05
    230a:	fc 01       	movw	r30, r24
    230c:	e2 0f       	add	r30, r18
    230e:	f3 1f       	adc	r31, r19
    2310:	40 81       	ld	r20, Z
    2312:	29 81       	ldd	r18, Y+1	; 0x01
    2314:	3a 81       	ldd	r19, Y+2	; 0x02
    2316:	8e 81       	ldd	r24, Y+6	; 0x06
    2318:	9f 81       	ldd	r25, Y+7	; 0x07
    231a:	fc 01       	movw	r30, r24
    231c:	e2 0f       	add	r30, r18
    231e:	f3 1f       	adc	r31, r19
    2320:	80 81       	ld	r24, Z
    2322:	48 17       	cp	r20, r24
    2324:	09 f0       	breq	.+2      	; 0x2328 <match+0x4c>
			flag = 0;
    2326:	1b 82       	std	Y+3, r1	; 0x03

/* Function Description
 * check if the two passwords match */
uint8 match(uint8 p[PASS_SIZE], uint8 p2[PASS_SIZE]){
	uint8 flag = 1; /* assume they match */
	for (int var = 0; var < PASS_SIZE; ++var) {
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	9a 81       	ldd	r25, Y+2	; 0x02
    232c:	01 96       	adiw	r24, 0x01	; 1
    232e:	9a 83       	std	Y+2, r25	; 0x02
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	9a 81       	ldd	r25, Y+2	; 0x02
    2336:	85 30       	cpi	r24, 0x05	; 5
    2338:	91 05       	cpc	r25, r1
    233a:	1c f3       	brlt	.-58     	; 0x2302 <match+0x26>
		if(p[var]!=p2[var]){
			flag = 0;
		}
	}

	return flag;
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    233e:	27 96       	adiw	r28, 0x07	; 7
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <pass_matching>:

/* Function Description
 * check if the 2 passwords are the same and store them in the eeprom for displaystep1 */
void pass_matching(void){
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	2e 97       	sbiw	r28, 0x0e	; 14
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
	do{
		recieve_pass(pass);
    2364:	8f e7       	ldi	r24, 0x7F	; 127
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <recieve_pass>
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	a8 e4       	ldi	r26, 0x48	; 72
    2372:	b2 e4       	ldi	r27, 0x42	; 66
    2374:	8b 87       	std	Y+11, r24	; 0x0b
    2376:	9c 87       	std	Y+12, r25	; 0x0c
    2378:	ad 87       	std	Y+13, r26	; 0x0d
    237a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237c:	6b 85       	ldd	r22, Y+11	; 0x0b
    237e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2380:	8d 85       	ldd	r24, Y+13	; 0x0d
    2382:	9e 85       	ldd	r25, Y+14	; 0x0e
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	4a e7       	ldi	r20, 0x7A	; 122
    238a:	53 e4       	ldi	r21, 0x43	; 67
    238c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	8f 83       	std	Y+7, r24	; 0x07
    2396:	98 87       	std	Y+8, r25	; 0x08
    2398:	a9 87       	std	Y+9, r26	; 0x09
    239a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    239c:	6f 81       	ldd	r22, Y+7	; 0x07
    239e:	78 85       	ldd	r23, Y+8	; 0x08
    23a0:	89 85       	ldd	r24, Y+9	; 0x09
    23a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e8       	ldi	r20, 0x80	; 128
    23aa:	5f e3       	ldi	r21, 0x3F	; 63
    23ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b0:	88 23       	and	r24, r24
    23b2:	2c f4       	brge	.+10     	; 0x23be <pass_matching+0x6e>
		__ticks = 1;
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	9e 83       	std	Y+6, r25	; 0x06
    23ba:	8d 83       	std	Y+5, r24	; 0x05
    23bc:	3f c0       	rjmp	.+126    	; 0x243c <pass_matching+0xec>
	else if (__tmp > 65535)
    23be:	6f 81       	ldd	r22, Y+7	; 0x07
    23c0:	78 85       	ldd	r23, Y+8	; 0x08
    23c2:	89 85       	ldd	r24, Y+9	; 0x09
    23c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	3f ef       	ldi	r19, 0xFF	; 255
    23ca:	4f e7       	ldi	r20, 0x7F	; 127
    23cc:	57 e4       	ldi	r21, 0x47	; 71
    23ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d2:	18 16       	cp	r1, r24
    23d4:	4c f5       	brge	.+82     	; 0x2428 <pass_matching+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23da:	8d 85       	ldd	r24, Y+13	; 0x0d
    23dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e2       	ldi	r20, 0x20	; 32
    23e4:	51 e4       	ldi	r21, 0x41	; 65
    23e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	bc 01       	movw	r22, r24
    23f0:	cd 01       	movw	r24, r26
    23f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	9e 83       	std	Y+6, r25	; 0x06
    23fc:	8d 83       	std	Y+5, r24	; 0x05
    23fe:	0f c0       	rjmp	.+30     	; 0x241e <pass_matching+0xce>
    2400:	89 e1       	ldi	r24, 0x19	; 25
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	9c 83       	std	Y+4, r25	; 0x04
    2406:	8b 83       	std	Y+3, r24	; 0x03
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	9c 81       	ldd	r25, Y+4	; 0x04
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	f1 f7       	brne	.-4      	; 0x240c <pass_matching+0xbc>
    2410:	9c 83       	std	Y+4, r25	; 0x04
    2412:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	9e 81       	ldd	r25, Y+6	; 0x06
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	9e 83       	std	Y+6, r25	; 0x06
    241c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241e:	8d 81       	ldd	r24, Y+5	; 0x05
    2420:	9e 81       	ldd	r25, Y+6	; 0x06
    2422:	00 97       	sbiw	r24, 0x00	; 0
    2424:	69 f7       	brne	.-38     	; 0x2400 <pass_matching+0xb0>
    2426:	14 c0       	rjmp	.+40     	; 0x2450 <pass_matching+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2428:	6f 81       	ldd	r22, Y+7	; 0x07
    242a:	78 85       	ldd	r23, Y+8	; 0x08
    242c:	89 85       	ldd	r24, Y+9	; 0x09
    242e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	9e 83       	std	Y+6, r25	; 0x06
    243a:	8d 83       	std	Y+5, r24	; 0x05
    243c:	8d 81       	ldd	r24, Y+5	; 0x05
    243e:	9e 81       	ldd	r25, Y+6	; 0x06
    2440:	9a 83       	std	Y+2, r25	; 0x02
    2442:	89 83       	std	Y+1, r24	; 0x01
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	9a 81       	ldd	r25, Y+2	; 0x02
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <pass_matching+0xf8>
    244c:	9a 83       	std	Y+2, r25	; 0x02
    244e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		recieve_pass(re_pass);
    2450:	84 e8       	ldi	r24, 0x84	; 132
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <recieve_pass>

		if(match(pass,re_pass)){
    2458:	8f e7       	ldi	r24, 0x7F	; 127
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	24 e8       	ldi	r18, 0x84	; 132
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	b9 01       	movw	r22, r18
    2462:	0e 94 6e 11 	call	0x22dc	; 0x22dc <match>
    2466:	88 23       	and	r24, r24
    2468:	31 f0       	breq	.+12     	; 0x2476 <pass_matching+0x126>
			store_pass();
    246a:	0e 94 28 10 	call	0x2050	; 0x2050 <store_pass>

			UART_sendByte(ready);/*to confirm they match*/
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <UART_sendByte>
    2474:	03 c0       	rjmp	.+6      	; 0x247c <pass_matching+0x12c>
		}
		else{
			UART_sendByte(!ready);
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <UART_sendByte>
		}
	}while(!match(pass,re_pass));
    247c:	8f e7       	ldi	r24, 0x7F	; 127
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	24 e8       	ldi	r18, 0x84	; 132
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	b9 01       	movw	r22, r18
    2486:	0e 94 6e 11 	call	0x22dc	; 0x22dc <match>
    248a:	88 23       	and	r24, r24
    248c:	09 f4       	brne	.+2      	; 0x2490 <pass_matching+0x140>
    248e:	6a cf       	rjmp	.-300    	; 0x2364 <pass_matching+0x14>

}
    2490:	2e 96       	adiw	r28, 0x0e	; 14
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	cf 91       	pop	r28
    249e:	df 91       	pop	r29
    24a0:	08 95       	ret

000024a2 <pass_matching2>:

/* Function Description
 * check if the confirmation password and password stored in the eeprom are matching */
void pass_matching2(void){
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	ac 97       	sbiw	r28, 0x2c	; 44
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	de bf       	out	0x3e, r29	; 62
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	cd bf       	out	0x3d, r28	; 61

	    /*for loop
	     * to loop 3 times if the user entered the pass wrong and it will beak if it was right */
		for (int var = 0; var < 3; ++var) {
    24b6:	1c a6       	std	Y+44, r1	; 0x2c
    24b8:	1b a6       	std	Y+43, r1	; 0x2b
    24ba:	77 c1       	rjmp	.+750    	; 0x27aa <pass_matching2+0x308>
			recieve_pass(confirm_pass1);
    24bc:	89 e8       	ldi	r24, 0x89	; 137
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <recieve_pass>
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	a8 e4       	ldi	r26, 0x48	; 72
    24ca:	b2 e4       	ldi	r27, 0x42	; 66
    24cc:	8f a3       	std	Y+39, r24	; 0x27
    24ce:	98 a7       	std	Y+40, r25	; 0x28
    24d0:	a9 a7       	std	Y+41, r26	; 0x29
    24d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d4:	6f a1       	ldd	r22, Y+39	; 0x27
    24d6:	78 a5       	ldd	r23, Y+40	; 0x28
    24d8:	89 a5       	ldd	r24, Y+41	; 0x29
    24da:	9a a5       	ldd	r25, Y+42	; 0x2a
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	4a e7       	ldi	r20, 0x7A	; 122
    24e2:	53 e4       	ldi	r21, 0x43	; 67
    24e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	8b a3       	std	Y+35, r24	; 0x23
    24ee:	9c a3       	std	Y+36, r25	; 0x24
    24f0:	ad a3       	std	Y+37, r26	; 0x25
    24f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24f4:	6b a1       	ldd	r22, Y+35	; 0x23
    24f6:	7c a1       	ldd	r23, Y+36	; 0x24
    24f8:	8d a1       	ldd	r24, Y+37	; 0x25
    24fa:	9e a1       	ldd	r25, Y+38	; 0x26
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e8       	ldi	r20, 0x80	; 128
    2502:	5f e3       	ldi	r21, 0x3F	; 63
    2504:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2508:	88 23       	and	r24, r24
    250a:	2c f4       	brge	.+10     	; 0x2516 <pass_matching2+0x74>
		__ticks = 1;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9a a3       	std	Y+34, r25	; 0x22
    2512:	89 a3       	std	Y+33, r24	; 0x21
    2514:	3f c0       	rjmp	.+126    	; 0x2594 <pass_matching2+0xf2>
	else if (__tmp > 65535)
    2516:	6b a1       	ldd	r22, Y+35	; 0x23
    2518:	7c a1       	ldd	r23, Y+36	; 0x24
    251a:	8d a1       	ldd	r24, Y+37	; 0x25
    251c:	9e a1       	ldd	r25, Y+38	; 0x26
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	3f ef       	ldi	r19, 0xFF	; 255
    2522:	4f e7       	ldi	r20, 0x7F	; 127
    2524:	57 e4       	ldi	r21, 0x47	; 71
    2526:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    252a:	18 16       	cp	r1, r24
    252c:	4c f5       	brge	.+82     	; 0x2580 <pass_matching2+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252e:	6f a1       	ldd	r22, Y+39	; 0x27
    2530:	78 a5       	ldd	r23, Y+40	; 0x28
    2532:	89 a5       	ldd	r24, Y+41	; 0x29
    2534:	9a a5       	ldd	r25, Y+42	; 0x2a
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e2       	ldi	r20, 0x20	; 32
    253c:	51 e4       	ldi	r21, 0x41	; 65
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	9a a3       	std	Y+34, r25	; 0x22
    2554:	89 a3       	std	Y+33, r24	; 0x21
    2556:	0f c0       	rjmp	.+30     	; 0x2576 <pass_matching2+0xd4>
    2558:	89 e1       	ldi	r24, 0x19	; 25
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	98 a3       	std	Y+32, r25	; 0x20
    255e:	8f 8f       	std	Y+31, r24	; 0x1f
    2560:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2562:	98 a1       	ldd	r25, Y+32	; 0x20
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	f1 f7       	brne	.-4      	; 0x2564 <pass_matching2+0xc2>
    2568:	98 a3       	std	Y+32, r25	; 0x20
    256a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256c:	89 a1       	ldd	r24, Y+33	; 0x21
    256e:	9a a1       	ldd	r25, Y+34	; 0x22
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	9a a3       	std	Y+34, r25	; 0x22
    2574:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2576:	89 a1       	ldd	r24, Y+33	; 0x21
    2578:	9a a1       	ldd	r25, Y+34	; 0x22
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	69 f7       	brne	.-38     	; 0x2558 <pass_matching2+0xb6>
    257e:	14 c0       	rjmp	.+40     	; 0x25a8 <pass_matching2+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2580:	6b a1       	ldd	r22, Y+35	; 0x23
    2582:	7c a1       	ldd	r23, Y+36	; 0x24
    2584:	8d a1       	ldd	r24, Y+37	; 0x25
    2586:	9e a1       	ldd	r25, Y+38	; 0x26
    2588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	9a a3       	std	Y+34, r25	; 0x22
    2592:	89 a3       	std	Y+33, r24	; 0x21
    2594:	89 a1       	ldd	r24, Y+33	; 0x21
    2596:	9a a1       	ldd	r25, Y+34	; 0x22
    2598:	9e 8f       	std	Y+30, r25	; 0x1e
    259a:	8d 8f       	std	Y+29, r24	; 0x1d
    259c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    259e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <pass_matching2+0xfe>
    25a4:	9e 8f       	std	Y+30, r25	; 0x1e
    25a6:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(50);
			return_pass(confirm_pass2);
    25a8:	8e e8       	ldi	r24, 0x8E	; 142
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	0e 94 ca 10 	call	0x2194	; 0x2194 <return_pass>

			/*if confirm at any time will break the loop*/
			if(match(confirm_pass1,confirm_pass2)){
    25b0:	89 e8       	ldi	r24, 0x89	; 137
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	2e e8       	ldi	r18, 0x8E	; 142
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	b9 01       	movw	r22, r18
    25ba:	0e 94 6e 11 	call	0x22dc	; 0x22dc <match>
    25be:	88 23       	and	r24, r24
    25c0:	09 f4       	brne	.+2      	; 0x25c4 <pass_matching2+0x122>
    25c2:	79 c0       	rjmp	.+242    	; 0x26b6 <pass_matching2+0x214>
				UART_sendByte(ready);
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <UART_sendByte>
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	a8 e4       	ldi	r26, 0x48	; 72
    25d0:	b2 e4       	ldi	r27, 0x42	; 66
    25d2:	89 8f       	std	Y+25, r24	; 0x19
    25d4:	9a 8f       	std	Y+26, r25	; 0x1a
    25d6:	ab 8f       	std	Y+27, r26	; 0x1b
    25d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25da:	69 8d       	ldd	r22, Y+25	; 0x19
    25dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	4a e7       	ldi	r20, 0x7A	; 122
    25e8:	53 e4       	ldi	r21, 0x43	; 67
    25ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	8d 8b       	std	Y+21, r24	; 0x15
    25f4:	9e 8b       	std	Y+22, r25	; 0x16
    25f6:	af 8b       	std	Y+23, r26	; 0x17
    25f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25fa:	6d 89       	ldd	r22, Y+21	; 0x15
    25fc:	7e 89       	ldd	r23, Y+22	; 0x16
    25fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2600:	98 8d       	ldd	r25, Y+24	; 0x18
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	40 e8       	ldi	r20, 0x80	; 128
    2608:	5f e3       	ldi	r21, 0x3F	; 63
    260a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    260e:	88 23       	and	r24, r24
    2610:	2c f4       	brge	.+10     	; 0x261c <pass_matching2+0x17a>
		__ticks = 1;
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	9c 8b       	std	Y+20, r25	; 0x14
    2618:	8b 8b       	std	Y+19, r24	; 0x13
    261a:	3f c0       	rjmp	.+126    	; 0x269a <pass_matching2+0x1f8>
	else if (__tmp > 65535)
    261c:	6d 89       	ldd	r22, Y+21	; 0x15
    261e:	7e 89       	ldd	r23, Y+22	; 0x16
    2620:	8f 89       	ldd	r24, Y+23	; 0x17
    2622:	98 8d       	ldd	r25, Y+24	; 0x18
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	3f ef       	ldi	r19, 0xFF	; 255
    2628:	4f e7       	ldi	r20, 0x7F	; 127
    262a:	57 e4       	ldi	r21, 0x47	; 71
    262c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2630:	18 16       	cp	r1, r24
    2632:	4c f5       	brge	.+82     	; 0x2686 <pass_matching2+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2634:	69 8d       	ldd	r22, Y+25	; 0x19
    2636:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2638:	8b 8d       	ldd	r24, Y+27	; 0x1b
    263a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e2       	ldi	r20, 0x20	; 32
    2642:	51 e4       	ldi	r21, 0x41	; 65
    2644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	bc 01       	movw	r22, r24
    264e:	cd 01       	movw	r24, r26
    2650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	9c 8b       	std	Y+20, r25	; 0x14
    265a:	8b 8b       	std	Y+19, r24	; 0x13
    265c:	0f c0       	rjmp	.+30     	; 0x267c <pass_matching2+0x1da>
    265e:	89 e1       	ldi	r24, 0x19	; 25
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	9a 8b       	std	Y+18, r25	; 0x12
    2664:	89 8b       	std	Y+17, r24	; 0x11
    2666:	89 89       	ldd	r24, Y+17	; 0x11
    2668:	9a 89       	ldd	r25, Y+18	; 0x12
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	f1 f7       	brne	.-4      	; 0x266a <pass_matching2+0x1c8>
    266e:	9a 8b       	std	Y+18, r25	; 0x12
    2670:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2672:	8b 89       	ldd	r24, Y+19	; 0x13
    2674:	9c 89       	ldd	r25, Y+20	; 0x14
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	9c 8b       	std	Y+20, r25	; 0x14
    267a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267c:	8b 89       	ldd	r24, Y+19	; 0x13
    267e:	9c 89       	ldd	r25, Y+20	; 0x14
    2680:	00 97       	sbiw	r24, 0x00	; 0
    2682:	69 f7       	brne	.-38     	; 0x265e <pass_matching2+0x1bc>
    2684:	14 c0       	rjmp	.+40     	; 0x26ae <pass_matching2+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2686:	6d 89       	ldd	r22, Y+21	; 0x15
    2688:	7e 89       	ldd	r23, Y+22	; 0x16
    268a:	8f 89       	ldd	r24, Y+23	; 0x17
    268c:	98 8d       	ldd	r25, Y+24	; 0x18
    268e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	9c 8b       	std	Y+20, r25	; 0x14
    2698:	8b 8b       	std	Y+19, r24	; 0x13
    269a:	8b 89       	ldd	r24, Y+19	; 0x13
    269c:	9c 89       	ldd	r25, Y+20	; 0x14
    269e:	98 8b       	std	Y+16, r25	; 0x10
    26a0:	8f 87       	std	Y+15, r24	; 0x0f
    26a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a4:	98 89       	ldd	r25, Y+16	; 0x10
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	f1 f7       	brne	.-4      	; 0x26a6 <pass_matching2+0x204>
    26aa:	98 8b       	std	Y+16, r25	; 0x10
    26ac:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(50);
				g_flag = 1;
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	80 93 7a 00 	sts	0x007A, r24
    26b4:	80 c0       	rjmp	.+256    	; 0x27b6 <pass_matching2+0x314>
				break;

			}
			else{
				UART_sendByte(!ready);
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <UART_sendByte>
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	a8 e4       	ldi	r26, 0x48	; 72
    26c2:	b2 e4       	ldi	r27, 0x42	; 66
    26c4:	8b 87       	std	Y+11, r24	; 0x0b
    26c6:	9c 87       	std	Y+12, r25	; 0x0c
    26c8:	ad 87       	std	Y+13, r26	; 0x0d
    26ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	4a e7       	ldi	r20, 0x7A	; 122
    26da:	53 e4       	ldi	r21, 0x43	; 67
    26dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	8f 83       	std	Y+7, r24	; 0x07
    26e6:	98 87       	std	Y+8, r25	; 0x08
    26e8:	a9 87       	std	Y+9, r26	; 0x09
    26ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26ec:	6f 81       	ldd	r22, Y+7	; 0x07
    26ee:	78 85       	ldd	r23, Y+8	; 0x08
    26f0:	89 85       	ldd	r24, Y+9	; 0x09
    26f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	40 e8       	ldi	r20, 0x80	; 128
    26fa:	5f e3       	ldi	r21, 0x3F	; 63
    26fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2700:	88 23       	and	r24, r24
    2702:	2c f4       	brge	.+10     	; 0x270e <pass_matching2+0x26c>
		__ticks = 1;
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	9e 83       	std	Y+6, r25	; 0x06
    270a:	8d 83       	std	Y+5, r24	; 0x05
    270c:	3f c0       	rjmp	.+126    	; 0x278c <pass_matching2+0x2ea>
	else if (__tmp > 65535)
    270e:	6f 81       	ldd	r22, Y+7	; 0x07
    2710:	78 85       	ldd	r23, Y+8	; 0x08
    2712:	89 85       	ldd	r24, Y+9	; 0x09
    2714:	9a 85       	ldd	r25, Y+10	; 0x0a
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	3f ef       	ldi	r19, 0xFF	; 255
    271a:	4f e7       	ldi	r20, 0x7F	; 127
    271c:	57 e4       	ldi	r21, 0x47	; 71
    271e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2722:	18 16       	cp	r1, r24
    2724:	4c f5       	brge	.+82     	; 0x2778 <pass_matching2+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2726:	6b 85       	ldd	r22, Y+11	; 0x0b
    2728:	7c 85       	ldd	r23, Y+12	; 0x0c
    272a:	8d 85       	ldd	r24, Y+13	; 0x0d
    272c:	9e 85       	ldd	r25, Y+14	; 0x0e
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e2       	ldi	r20, 0x20	; 32
    2734:	51 e4       	ldi	r21, 0x41	; 65
    2736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	bc 01       	movw	r22, r24
    2740:	cd 01       	movw	r24, r26
    2742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	9e 83       	std	Y+6, r25	; 0x06
    274c:	8d 83       	std	Y+5, r24	; 0x05
    274e:	0f c0       	rjmp	.+30     	; 0x276e <pass_matching2+0x2cc>
    2750:	89 e1       	ldi	r24, 0x19	; 25
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	9c 83       	std	Y+4, r25	; 0x04
    2756:	8b 83       	std	Y+3, r24	; 0x03
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	9c 81       	ldd	r25, Y+4	; 0x04
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <pass_matching2+0x2ba>
    2760:	9c 83       	std	Y+4, r25	; 0x04
    2762:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2764:	8d 81       	ldd	r24, Y+5	; 0x05
    2766:	9e 81       	ldd	r25, Y+6	; 0x06
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	9e 83       	std	Y+6, r25	; 0x06
    276c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    276e:	8d 81       	ldd	r24, Y+5	; 0x05
    2770:	9e 81       	ldd	r25, Y+6	; 0x06
    2772:	00 97       	sbiw	r24, 0x00	; 0
    2774:	69 f7       	brne	.-38     	; 0x2750 <pass_matching2+0x2ae>
    2776:	14 c0       	rjmp	.+40     	; 0x27a0 <pass_matching2+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2778:	6f 81       	ldd	r22, Y+7	; 0x07
    277a:	78 85       	ldd	r23, Y+8	; 0x08
    277c:	89 85       	ldd	r24, Y+9	; 0x09
    277e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	9e 83       	std	Y+6, r25	; 0x06
    278a:	8d 83       	std	Y+5, r24	; 0x05
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	9e 81       	ldd	r25, Y+6	; 0x06
    2790:	9a 83       	std	Y+2, r25	; 0x02
    2792:	89 83       	std	Y+1, r24	; 0x01
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	9a 81       	ldd	r25, Y+2	; 0x02
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	f1 f7       	brne	.-4      	; 0x2798 <pass_matching2+0x2f6>
    279c:	9a 83       	std	Y+2, r25	; 0x02
    279e:	89 83       	std	Y+1, r24	; 0x01
 * check if the confirmation password and password stored in the eeprom are matching */
void pass_matching2(void){

	    /*for loop
	     * to loop 3 times if the user entered the pass wrong and it will beak if it was right */
		for (int var = 0; var < 3; ++var) {
    27a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    27a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    27a4:	01 96       	adiw	r24, 0x01	; 1
    27a6:	9c a7       	std	Y+44, r25	; 0x2c
    27a8:	8b a7       	std	Y+43, r24	; 0x2b
    27aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    27ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    27ae:	83 30       	cpi	r24, 0x03	; 3
    27b0:	91 05       	cpc	r25, r1
    27b2:	0c f4       	brge	.+2      	; 0x27b6 <pass_matching2+0x314>
    27b4:	83 ce       	rjmp	.-762    	; 0x24bc <pass_matching2+0x1a>
				UART_sendByte(!ready);
				_delay_ms(50);
			}
		}

}
    27b6:	ac 96       	adiw	r28, 0x2c	; 44
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	f8 94       	cli
    27bc:	de bf       	out	0x3e, r29	; 62
    27be:	0f be       	out	0x3f, r0	; 63
    27c0:	cd bf       	out	0x3d, r28	; 61
    27c2:	cf 91       	pop	r28
    27c4:	df 91       	pop	r29
    27c6:	08 95       	ret

000027c8 <timer_tick>:

/* Function Description
 * call back function that increase the tick every call*/
void timer_tick(void){
    27c8:	df 93       	push	r29
    27ca:	cf 93       	push	r28
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    27d0:	80 91 7b 00 	lds	r24, 0x007B
    27d4:	90 91 7c 00 	lds	r25, 0x007C
    27d8:	a0 91 7d 00 	lds	r26, 0x007D
    27dc:	b0 91 7e 00 	lds	r27, 0x007E
    27e0:	01 96       	adiw	r24, 0x01	; 1
    27e2:	a1 1d       	adc	r26, r1
    27e4:	b1 1d       	adc	r27, r1
    27e6:	80 93 7b 00 	sts	0x007B, r24
    27ea:	90 93 7c 00 	sts	0x007C, r25
    27ee:	a0 93 7d 00 	sts	0x007D, r26
    27f2:	b0 93 7e 00 	sts	0x007E, r27
}
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	08 95       	ret

000027fc <wait>:

/* Function Description
 * wait until specified time in seconds */
void wait(uint32 seconds){
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
    2804:	64 97       	sbiw	r28, 0x14	; 20
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	f8 94       	cli
    280a:	de bf       	out	0x3e, r29	; 62
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	cd bf       	out	0x3d, r28	; 61
    2810:	6c 87       	std	Y+12, r22	; 0x0c
    2812:	7d 87       	std	Y+13, r23	; 0x0d
    2814:	8e 87       	std	Y+14, r24	; 0x0e
    2816:	9f 87       	std	Y+15, r25	; 0x0f

	g_tick = 0;
    2818:	10 92 7b 00 	sts	0x007B, r1
    281c:	10 92 7c 00 	sts	0x007C, r1
    2820:	10 92 7d 00 	sts	0x007D, r1
    2824:	10 92 7e 00 	sts	0x007E, r1
	uint32 tick = seconds*31;/*the seconds multiplied in the number of ticks to complete 1 second */
    2828:	2c 85       	ldd	r18, Y+12	; 0x0c
    282a:	3d 85       	ldd	r19, Y+13	; 0x0d
    282c:	4e 85       	ldd	r20, Y+14	; 0x0e
    282e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2830:	da 01       	movw	r26, r20
    2832:	c9 01       	movw	r24, r18
    2834:	88 0f       	add	r24, r24
    2836:	99 1f       	adc	r25, r25
    2838:	aa 1f       	adc	r26, r26
    283a:	bb 1f       	adc	r27, r27
    283c:	88 0f       	add	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	aa 1f       	adc	r26, r26
    2842:	bb 1f       	adc	r27, r27
    2844:	88 0f       	add	r24, r24
    2846:	99 1f       	adc	r25, r25
    2848:	aa 1f       	adc	r26, r26
    284a:	bb 1f       	adc	r27, r27
    284c:	88 0f       	add	r24, r24
    284e:	99 1f       	adc	r25, r25
    2850:	aa 1f       	adc	r26, r26
    2852:	bb 1f       	adc	r27, r27
    2854:	88 0f       	add	r24, r24
    2856:	99 1f       	adc	r25, r25
    2858:	aa 1f       	adc	r26, r26
    285a:	bb 1f       	adc	r27, r27
    285c:	82 1b       	sub	r24, r18
    285e:	93 0b       	sbc	r25, r19
    2860:	a4 0b       	sbc	r26, r20
    2862:	b5 0b       	sbc	r27, r21
    2864:	89 83       	std	Y+1, r24	; 0x01
    2866:	9a 83       	std	Y+2, r25	; 0x02
    2868:	ab 83       	std	Y+3, r26	; 0x03
    286a:	bc 83       	std	Y+4, r27	; 0x04
	TIMER0_ConfigType config = {NORMAL,0,250,F_CPU1024};
    286c:	ce 01       	movw	r24, r28
    286e:	05 96       	adiw	r24, 0x05	; 5
    2870:	99 8b       	std	Y+17, r25	; 0x11
    2872:	88 8b       	std	Y+16, r24	; 0x10
    2874:	e0 e7       	ldi	r30, 0x70	; 112
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	fb 8b       	std	Y+19, r31	; 0x13
    287a:	ea 8b       	std	Y+18, r30	; 0x12
    287c:	f7 e0       	ldi	r31, 0x07	; 7
    287e:	fc 8b       	std	Y+20, r31	; 0x14
    2880:	ea 89       	ldd	r30, Y+18	; 0x12
    2882:	fb 89       	ldd	r31, Y+19	; 0x13
    2884:	00 80       	ld	r0, Z
    2886:	8a 89       	ldd	r24, Y+18	; 0x12
    2888:	9b 89       	ldd	r25, Y+19	; 0x13
    288a:	01 96       	adiw	r24, 0x01	; 1
    288c:	9b 8b       	std	Y+19, r25	; 0x13
    288e:	8a 8b       	std	Y+18, r24	; 0x12
    2890:	e8 89       	ldd	r30, Y+16	; 0x10
    2892:	f9 89       	ldd	r31, Y+17	; 0x11
    2894:	00 82       	st	Z, r0
    2896:	88 89       	ldd	r24, Y+16	; 0x10
    2898:	99 89       	ldd	r25, Y+17	; 0x11
    289a:	01 96       	adiw	r24, 0x01	; 1
    289c:	99 8b       	std	Y+17, r25	; 0x11
    289e:	88 8b       	std	Y+16, r24	; 0x10
    28a0:	9c 89       	ldd	r25, Y+20	; 0x14
    28a2:	91 50       	subi	r25, 0x01	; 1
    28a4:	9c 8b       	std	Y+20, r25	; 0x14
    28a6:	ec 89       	ldd	r30, Y+20	; 0x14
    28a8:	ee 23       	and	r30, r30
    28aa:	51 f7       	brne	.-44     	; 0x2880 <wait+0x84>
	TIMER0_init(&config);
    28ac:	ce 01       	movw	r24, r28
    28ae:	05 96       	adiw	r24, 0x05	; 5
    28b0:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <TIMER0_init>

	TIMER0_setCallBack(timer_tick);
    28b4:	84 ee       	ldi	r24, 0xE4	; 228
    28b6:	93 e1       	ldi	r25, 0x13	; 19
    28b8:	0e 94 5d 15 	call	0x2aba	; 0x2aba <TIMER0_setCallBack>

	while(g_tick  < tick);
    28bc:	20 91 7b 00 	lds	r18, 0x007B
    28c0:	30 91 7c 00 	lds	r19, 0x007C
    28c4:	40 91 7d 00 	lds	r20, 0x007D
    28c8:	50 91 7e 00 	lds	r21, 0x007E
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	9a 81       	ldd	r25, Y+2	; 0x02
    28d0:	ab 81       	ldd	r26, Y+3	; 0x03
    28d2:	bc 81       	ldd	r27, Y+4	; 0x04
    28d4:	28 17       	cp	r18, r24
    28d6:	39 07       	cpc	r19, r25
    28d8:	4a 07       	cpc	r20, r26
    28da:	5b 07       	cpc	r21, r27
    28dc:	78 f3       	brcs	.-34     	; 0x28bc <wait+0xc0>

	TIMER0_DeInit();
    28de:	0e 94 6f 15 	call	0x2ade	; 0x2ade <TIMER0_DeInit>
}
    28e2:	64 96       	adiw	r28, 0x14	; 20
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	de bf       	out	0x3e, r29	; 62
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	cd bf       	out	0x3d, r28	; 61
    28ee:	cf 91       	pop	r28
    28f0:	df 91       	pop	r29
    28f2:	08 95       	ret

000028f4 <dc_motor_operations>:

/* Function Description
 * the operations the dc motor will make when match happens
 * */
void dc_motor_operations(void){
    28f4:	df 93       	push	r29
    28f6:	cf 93       	push	r28
    28f8:	cd b7       	in	r28, 0x3d	; 61
    28fa:	de b7       	in	r29, 0x3e	; 62

	DcMotor_Rotate(DC_MOTOR_CW);
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <DcMotor_Rotate>
	wait(15);
    2902:	6f e0       	ldi	r22, 0x0F	; 15
    2904:	70 e0       	ldi	r23, 0x00	; 0
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	0e 94 fe 13 	call	0x27fc	; 0x27fc <wait>
	DcMotor_Rotate(DC_MOTOR_STOP);
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <DcMotor_Rotate>
	wait(3);
    2914:	63 e0       	ldi	r22, 0x03	; 3
    2916:	70 e0       	ldi	r23, 0x00	; 0
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	0e 94 fe 13 	call	0x27fc	; 0x27fc <wait>
	DcMotor_Rotate(DC_MOTOR_ACW);
    2920:	82 e0       	ldi	r24, 0x02	; 2
    2922:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <DcMotor_Rotate>
	wait(15);
    2926:	6f e0       	ldi	r22, 0x0F	; 15
    2928:	70 e0       	ldi	r23, 0x00	; 0
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	0e 94 fe 13 	call	0x27fc	; 0x27fc <wait>
	DcMotor_Rotate(DC_MOTOR_STOP);
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <DcMotor_Rotate>

}
    2938:	cf 91       	pop	r28
    293a:	df 91       	pop	r29
    293c:	08 95       	ret

0000293e <buzzer_operations>:


/* Function Description
 * the operations the buzzer will make when mismatch happens
 * */
void buzzer_operations(void){
    293e:	df 93       	push	r29
    2940:	cf 93       	push	r28
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
	BUZZER_on();
    2946:	0e 94 b4 05 	call	0xb68	; 0xb68 <BUZZER_on>
	wait(60); /* 60 seconds */
    294a:	6c e3       	ldi	r22, 0x3C	; 60
    294c:	70 e0       	ldi	r23, 0x00	; 0
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	0e 94 fe 13 	call	0x27fc	; 0x27fc <wait>
	BUZZER_off();
    2956:	0e 94 c0 05 	call	0xb80	; 0xb80 <BUZZER_off>

}
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	08 95       	ret

00002960 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    2960:	1f 92       	push	r1
    2962:	0f 92       	push	r0
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	0f 92       	push	r0
    2968:	11 24       	eor	r1, r1
    296a:	2f 93       	push	r18
    296c:	3f 93       	push	r19
    296e:	4f 93       	push	r20
    2970:	5f 93       	push	r21
    2972:	6f 93       	push	r22
    2974:	7f 93       	push	r23
    2976:	8f 93       	push	r24
    2978:	9f 93       	push	r25
    297a:	af 93       	push	r26
    297c:	bf 93       	push	r27
    297e:	ef 93       	push	r30
    2980:	ff 93       	push	r31
    2982:	df 93       	push	r29
    2984:	cf 93       	push	r28
    2986:	cd b7       	in	r28, 0x3d	; 61
    2988:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    298a:	80 91 93 00 	lds	r24, 0x0093
    298e:	90 91 94 00 	lds	r25, 0x0094
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	29 f0       	breq	.+10     	; 0x29a0 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2996:	e0 91 93 00 	lds	r30, 0x0093
    299a:	f0 91 94 00 	lds	r31, 0x0094
    299e:	09 95       	icall
	}

}
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	ff 91       	pop	r31
    29a6:	ef 91       	pop	r30
    29a8:	bf 91       	pop	r27
    29aa:	af 91       	pop	r26
    29ac:	9f 91       	pop	r25
    29ae:	8f 91       	pop	r24
    29b0:	7f 91       	pop	r23
    29b2:	6f 91       	pop	r22
    29b4:	5f 91       	pop	r21
    29b6:	4f 91       	pop	r20
    29b8:	3f 91       	pop	r19
    29ba:	2f 91       	pop	r18
    29bc:	0f 90       	pop	r0
    29be:	0f be       	out	0x3f, r0	; 63
    29c0:	0f 90       	pop	r0
    29c2:	1f 90       	pop	r1
    29c4:	18 95       	reti

000029c6 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    29c6:	1f 92       	push	r1
    29c8:	0f 92       	push	r0
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	0f 92       	push	r0
    29ce:	11 24       	eor	r1, r1
    29d0:	2f 93       	push	r18
    29d2:	3f 93       	push	r19
    29d4:	4f 93       	push	r20
    29d6:	5f 93       	push	r21
    29d8:	6f 93       	push	r22
    29da:	7f 93       	push	r23
    29dc:	8f 93       	push	r24
    29de:	9f 93       	push	r25
    29e0:	af 93       	push	r26
    29e2:	bf 93       	push	r27
    29e4:	ef 93       	push	r30
    29e6:	ff 93       	push	r31
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    29f0:	80 91 93 00 	lds	r24, 0x0093
    29f4:	90 91 94 00 	lds	r25, 0x0094
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	29 f0       	breq	.+10     	; 0x2a06 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    29fc:	e0 91 93 00 	lds	r30, 0x0093
    2a00:	f0 91 94 00 	lds	r31, 0x0094
    2a04:	09 95       	icall
	}

}
    2a06:	cf 91       	pop	r28
    2a08:	df 91       	pop	r29
    2a0a:	ff 91       	pop	r31
    2a0c:	ef 91       	pop	r30
    2a0e:	bf 91       	pop	r27
    2a10:	af 91       	pop	r26
    2a12:	9f 91       	pop	r25
    2a14:	8f 91       	pop	r24
    2a16:	7f 91       	pop	r23
    2a18:	6f 91       	pop	r22
    2a1a:	5f 91       	pop	r21
    2a1c:	4f 91       	pop	r20
    2a1e:	3f 91       	pop	r19
    2a20:	2f 91       	pop	r18
    2a22:	0f 90       	pop	r0
    2a24:	0f be       	out	0x3f, r0	; 63
    2a26:	0f 90       	pop	r0
    2a28:	1f 90       	pop	r1
    2a2a:	18 95       	reti

00002a2c <TIMER0_init>:
/*
 * Description: initializing TIMER0 in normal mode or overflow mode
 * depends on what the user choose
 */

void TIMER0_init(const TIMER0_ConfigType * config){
    2a2c:	df 93       	push	r29
    2a2e:	cf 93       	push	r28
    2a30:	00 d0       	rcall	.+0      	; 0x2a32 <TIMER0_init+0x6>
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	9a 83       	std	Y+2, r25	; 0x02
    2a38:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = config->initial_value;
    2a3a:	a2 e5       	ldi	r26, 0x52	; 82
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a40:	fa 81       	ldd	r31, Y+2	; 0x02
    2a42:	81 81       	ldd	r24, Z+1	; 0x01
    2a44:	8c 93       	st	X, r24
	/*
	 * non PWM mode
	 * */
	TCCR0 = (1<<FOC0);
    2a46:	e3 e5       	ldi	r30, 0x53	; 83
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 e8       	ldi	r24, 0x80	; 128
    2a4c:	80 83       	st	Z, r24
	TCCR0 = (TCCR0&~(0x07)) | (config->prescaler);
    2a4e:	a3 e5       	ldi	r26, 0x53	; 83
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	e3 e5       	ldi	r30, 0x53	; 83
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	98 2f       	mov	r25, r24
    2a5a:	98 7f       	andi	r25, 0xF8	; 248
    2a5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a60:	86 81       	ldd	r24, Z+6	; 0x06
    2a62:	89 2b       	or	r24, r25
    2a64:	8c 93       	st	X, r24
	 /* if the mode was Compare mode */
    if (config->mode == CTC){
    2a66:	e9 81       	ldd	r30, Y+1	; 0x01
    2a68:	fa 81       	ldd	r31, Y+2	; 0x02
    2a6a:	80 81       	ld	r24, Z
    2a6c:	82 30       	cpi	r24, 0x02	; 2
    2a6e:	c9 f4       	brne	.+50     	; 0x2aa2 <TIMER0_init+0x76>
		TCCR0 |= (1 << WGM01);
    2a70:	a3 e5       	ldi	r26, 0x53	; 83
    2a72:	b0 e0       	ldi	r27, 0x00	; 0
    2a74:	e3 e5       	ldi	r30, 0x53	; 83
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	80 81       	ld	r24, Z
    2a7a:	88 60       	ori	r24, 0x08	; 8
    2a7c:	8c 93       	st	X, r24
		TIMSK |= (1<< OCIE0);
    2a7e:	a9 e5       	ldi	r26, 0x59	; 89
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	e9 e5       	ldi	r30, 0x59	; 89
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	80 81       	ld	r24, Z
    2a88:	82 60       	ori	r24, 0x02	; 2
    2a8a:	8c 93       	st	X, r24
		OCR0 = config->comp_value;
    2a8c:	2c e5       	ldi	r18, 0x5C	; 92
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	e9 81       	ldd	r30, Y+1	; 0x01
    2a92:	fa 81       	ldd	r31, Y+2	; 0x02
    2a94:	82 81       	ldd	r24, Z+2	; 0x02
    2a96:	93 81       	ldd	r25, Z+3	; 0x03
    2a98:	a4 81       	ldd	r26, Z+4	; 0x04
    2a9a:	b5 81       	ldd	r27, Z+5	; 0x05
    2a9c:	f9 01       	movw	r30, r18
    2a9e:	80 83       	st	Z, r24
    2aa0:	07 c0       	rjmp	.+14     	; 0x2ab0 <TIMER0_init+0x84>
    }
    /* if the mode was Normal mode */
    else{
    	TIMSK |= (1<< TOIE0);
    2aa2:	a9 e5       	ldi	r26, 0x59	; 89
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	e9 e5       	ldi	r30, 0x59	; 89
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	81 60       	ori	r24, 0x01	; 1
    2aae:	8c 93       	st	X, r24
    }

}
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	cf 91       	pop	r28
    2ab6:	df 91       	pop	r29
    2ab8:	08 95       	ret

00002aba <TIMER0_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void TIMER0_setCallBack(void(*a_ptr)(void))
{
    2aba:	df 93       	push	r29
    2abc:	cf 93       	push	r28
    2abe:	00 d0       	rcall	.+0      	; 0x2ac0 <TIMER0_setCallBack+0x6>
    2ac0:	cd b7       	in	r28, 0x3d	; 61
    2ac2:	de b7       	in	r29, 0x3e	; 62
    2ac4:	9a 83       	std	Y+2, r25	; 0x02
    2ac6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	9a 81       	ldd	r25, Y+2	; 0x02
    2acc:	90 93 94 00 	sts	0x0094, r25
    2ad0:	80 93 93 00 	sts	0x0093, r24
}
    2ad4:	0f 90       	pop	r0
    2ad6:	0f 90       	pop	r0
    2ad8:	cf 91       	pop	r28
    2ada:	df 91       	pop	r29
    2adc:	08 95       	ret

00002ade <TIMER0_DeInit>:

/*
 * Description: Function to disable the Timer0
 */
void TIMER0_DeInit(void)
{
    2ade:	df 93       	push	r29
    2ae0:	cf 93       	push	r28
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer0 Registers */
	TCCR0 = 0;
    2ae6:	e3 e5       	ldi	r30, 0x53	; 83
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	10 82       	st	Z, r1
	TCNT0 = 0;
    2aec:	e2 e5       	ldi	r30, 0x52	; 82
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	10 82       	st	Z, r1
    OCR0 =0 ;
    2af2:	ec e5       	ldi	r30, 0x5C	; 92
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	10 82       	st	Z, r1
    TIMSK = 0;
    2af8:	e9 e5       	ldi	r30, 0x59	; 89
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	10 82       	st	Z, r1

}
    2afe:	cf 91       	pop	r28
    2b00:	df 91       	pop	r29
    2b02:	08 95       	ret

00002b04 <TWI_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void TWI_init(I2c_ConfigType * config)
{
    2b04:	cf 92       	push	r12
    2b06:	df 92       	push	r13
    2b08:	ef 92       	push	r14
    2b0a:	ff 92       	push	r15
    2b0c:	0f 93       	push	r16
    2b0e:	1f 93       	push	r17
    2b10:	df 93       	push	r29
    2b12:	cf 93       	push	r28
    2b14:	00 d0       	rcall	.+0      	; 0x2b16 <TWI_init+0x12>
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
    2b1a:	9a 83       	std	Y+2, r25	; 0x02
    2b1c:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = (((8*1000000)-(config->bit_rate)*1000)/(2*4*1000*config->bit_rate));
    2b1e:	cc 24       	eor	r12, r12
    2b20:	dd 24       	eor	r13, r13
    2b22:	68 94       	set
    2b24:	c5 f8       	bld	r12, 5
    2b26:	e9 81       	ldd	r30, Y+1	; 0x01
    2b28:	fa 81       	ldd	r31, Y+2	; 0x02
    2b2a:	80 81       	ld	r24, Z
    2b2c:	91 81       	ldd	r25, Z+1	; 0x01
    2b2e:	a2 81       	ldd	r26, Z+2	; 0x02
    2b30:	b3 81       	ldd	r27, Z+3	; 0x03
    2b32:	28 ee       	ldi	r18, 0xE8	; 232
    2b34:	33 e0       	ldi	r19, 0x03	; 3
    2b36:	40 e0       	ldi	r20, 0x00	; 0
    2b38:	50 e0       	ldi	r21, 0x00	; 0
    2b3a:	bc 01       	movw	r22, r24
    2b3c:	cd 01       	movw	r24, r26
    2b3e:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <__mulsi3>
    2b42:	9b 01       	movw	r18, r22
    2b44:	ac 01       	movw	r20, r24
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	92 e1       	ldi	r25, 0x12	; 18
    2b4a:	aa e7       	ldi	r26, 0x7A	; 122
    2b4c:	b0 e0       	ldi	r27, 0x00	; 0
    2b4e:	7c 01       	movw	r14, r24
    2b50:	8d 01       	movw	r16, r26
    2b52:	e2 1a       	sub	r14, r18
    2b54:	f3 0a       	sbc	r15, r19
    2b56:	04 0b       	sbc	r16, r20
    2b58:	15 0b       	sbc	r17, r21
    2b5a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b5c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b5e:	80 81       	ld	r24, Z
    2b60:	91 81       	ldd	r25, Z+1	; 0x01
    2b62:	a2 81       	ldd	r26, Z+2	; 0x02
    2b64:	b3 81       	ldd	r27, Z+3	; 0x03
    2b66:	20 e4       	ldi	r18, 0x40	; 64
    2b68:	3f e1       	ldi	r19, 0x1F	; 31
    2b6a:	40 e0       	ldi	r20, 0x00	; 0
    2b6c:	50 e0       	ldi	r21, 0x00	; 0
    2b6e:	bc 01       	movw	r22, r24
    2b70:	cd 01       	movw	r24, r26
    2b72:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <__mulsi3>
    2b76:	9b 01       	movw	r18, r22
    2b78:	ac 01       	movw	r20, r24
    2b7a:	c8 01       	movw	r24, r16
    2b7c:	b7 01       	movw	r22, r14
    2b7e:	0e 94 81 17 	call	0x2f02	; 0x2f02 <__udivmodsi4>
    2b82:	da 01       	movw	r26, r20
    2b84:	c9 01       	movw	r24, r18
    2b86:	f6 01       	movw	r30, r12
    2b88:	80 83       	st	Z, r24
	TWSR = 0x00; /* zero always and twpr determine the bit rat */
    2b8a:	e1 e2       	ldi	r30, 0x21	; 33
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR =(config->address); // my address = 0x01 :)
    2b90:	22 e2       	ldi	r18, 0x22	; 34
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	e9 81       	ldd	r30, Y+1	; 0x01
    2b96:	fa 81       	ldd	r31, Y+2	; 0x02
    2b98:	84 81       	ldd	r24, Z+4	; 0x04
    2b9a:	95 81       	ldd	r25, Z+5	; 0x05
    2b9c:	a6 81       	ldd	r26, Z+6	; 0x06
    2b9e:	b7 81       	ldd	r27, Z+7	; 0x07
    2ba0:	f9 01       	movw	r30, r18
    2ba2:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2ba4:	e6 e5       	ldi	r30, 0x56	; 86
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	84 e0       	ldi	r24, 0x04	; 4
    2baa:	80 83       	st	Z, r24
}
    2bac:	0f 90       	pop	r0
    2bae:	0f 90       	pop	r0
    2bb0:	cf 91       	pop	r28
    2bb2:	df 91       	pop	r29
    2bb4:	1f 91       	pop	r17
    2bb6:	0f 91       	pop	r16
    2bb8:	ff 90       	pop	r15
    2bba:	ef 90       	pop	r14
    2bbc:	df 90       	pop	r13
    2bbe:	cf 90       	pop	r12
    2bc0:	08 95       	ret

00002bc2 <TWI_start>:

void TWI_start(void)
{
    2bc2:	df 93       	push	r29
    2bc4:	cf 93       	push	r28
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2bca:	e6 e5       	ldi	r30, 0x56	; 86
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	84 ea       	ldi	r24, 0xA4	; 164
    2bd0:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2bd2:	e6 e5       	ldi	r30, 0x56	; 86
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	80 81       	ld	r24, Z
    2bd8:	88 23       	and	r24, r24
    2bda:	dc f7       	brge	.-10     	; 0x2bd2 <TWI_start+0x10>
}
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	08 95       	ret

00002be2 <TWI_stop>:

void TWI_stop(void)
{
    2be2:	df 93       	push	r29
    2be4:	cf 93       	push	r28
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2bea:	e6 e5       	ldi	r30, 0x56	; 86
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	84 e9       	ldi	r24, 0x94	; 148
    2bf0:	80 83       	st	Z, r24
}
    2bf2:	cf 91       	pop	r28
    2bf4:	df 91       	pop	r29
    2bf6:	08 95       	ret

00002bf8 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2bf8:	df 93       	push	r29
    2bfa:	cf 93       	push	r28
    2bfc:	0f 92       	push	r0
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2c04:	e3 e2       	ldi	r30, 0x23	; 35
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2c0c:	e6 e5       	ldi	r30, 0x56	; 86
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	84 e8       	ldi	r24, 0x84	; 132
    2c12:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2c14:	e6 e5       	ldi	r30, 0x56	; 86
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	88 23       	and	r24, r24
    2c1c:	dc f7       	brge	.-10     	; 0x2c14 <TWI_writeByte+0x1c>
}
    2c1e:	0f 90       	pop	r0
    2c20:	cf 91       	pop	r28
    2c22:	df 91       	pop	r29
    2c24:	08 95       	ret

00002c26 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2c26:	df 93       	push	r29
    2c28:	cf 93       	push	r28
    2c2a:	cd b7       	in	r28, 0x3d	; 61
    2c2c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2c2e:	e6 e5       	ldi	r30, 0x56	; 86
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	84 ec       	ldi	r24, 0xC4	; 196
    2c34:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2c36:	e6 e5       	ldi	r30, 0x56	; 86
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	88 23       	and	r24, r24
    2c3e:	dc f7       	brge	.-10     	; 0x2c36 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2c40:	e3 e2       	ldi	r30, 0x23	; 35
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
}
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	08 95       	ret

00002c4c <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2c4c:	df 93       	push	r29
    2c4e:	cf 93       	push	r28
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2c54:	e6 e5       	ldi	r30, 0x56	; 86
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	84 e8       	ldi	r24, 0x84	; 132
    2c5a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2c5c:	e6 e5       	ldi	r30, 0x56	; 86
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	80 81       	ld	r24, Z
    2c62:	88 23       	and	r24, r24
    2c64:	dc f7       	brge	.-10     	; 0x2c5c <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2c66:	e3 e2       	ldi	r30, 0x23	; 35
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
}
    2c6c:	cf 91       	pop	r28
    2c6e:	df 91       	pop	r29
    2c70:	08 95       	ret

00002c72 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2c72:	df 93       	push	r29
    2c74:	cf 93       	push	r28
    2c76:	0f 92       	push	r0
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2c7c:	e1 e2       	ldi	r30, 0x21	; 33
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	80 81       	ld	r24, Z
    2c82:	88 7f       	andi	r24, 0xF8	; 248
    2c84:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c88:	0f 90       	pop	r0
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate,UART_ConfigType * ConfigType)
{
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
    2c98:	28 97       	sbiw	r28, 0x08	; 8
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	f8 94       	cli
    2c9e:	de bf       	out	0x3e, r29	; 62
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	cd bf       	out	0x3d, r28	; 61
    2ca4:	6b 83       	std	Y+3, r22	; 0x03
    2ca6:	7c 83       	std	Y+4, r23	; 0x04
    2ca8:	8d 83       	std	Y+5, r24	; 0x05
    2caa:	9e 83       	std	Y+6, r25	; 0x06
    2cac:	58 87       	std	Y+8, r21	; 0x08
    2cae:	4f 83       	std	Y+7, r20	; 0x07
	uint16 ubrr_value = 0;
    2cb0:	1a 82       	std	Y+2, r1	; 0x02
    2cb2:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	if((ConfigType -> BitRate) == ASYNC_DOUBLE_MODE){
    2cb4:	ef 81       	ldd	r30, Y+7	; 0x07
    2cb6:	f8 85       	ldd	r31, Y+8	; 0x08
    2cb8:	83 81       	ldd	r24, Z+3	; 0x03
    2cba:	84 30       	cpi	r24, 0x04	; 4
    2cbc:	21 f4       	brne	.+8      	; 0x2cc6 <UART_init+0x36>
	     UCSRA = (1<<U2X);
    2cbe:	eb e2       	ldi	r30, 0x2B	; 43
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	82 e0       	ldi	r24, 0x02	; 2
    2cc4:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN) | ((ConfigType->CharacterSize & 0x04) << 2);
    2cc6:	aa e2       	ldi	r26, 0x2A	; 42
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	ef 81       	ldd	r30, Y+7	; 0x07
    2ccc:	f8 85       	ldd	r31, Y+8	; 0x08
    2cce:	80 81       	ld	r24, Z
    2cd0:	88 2f       	mov	r24, r24
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	84 70       	andi	r24, 0x04	; 4
    2cd6:	90 70       	andi	r25, 0x00	; 0
    2cd8:	88 0f       	add	r24, r24
    2cda:	99 1f       	adc	r25, r25
    2cdc:	88 0f       	add	r24, r24
    2cde:	99 1f       	adc	r25, r25
    2ce0:	88 61       	ori	r24, 0x18	; 24
    2ce2:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | ((ConfigType->CharacterSize & 0x03) << 1) | ((ConfigType->StopBit) << 3) | ((ConfigType->ParityMode) << 4);
    2ce4:	a0 e4       	ldi	r26, 0x40	; 64
    2ce6:	b0 e0       	ldi	r27, 0x00	; 0
    2ce8:	ef 81       	ldd	r30, Y+7	; 0x07
    2cea:	f8 85       	ldd	r31, Y+8	; 0x08
    2cec:	80 81       	ld	r24, Z
    2cee:	88 2f       	mov	r24, r24
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	83 70       	andi	r24, 0x03	; 3
    2cf4:	90 70       	andi	r25, 0x00	; 0
    2cf6:	88 0f       	add	r24, r24
    2cf8:	99 1f       	adc	r25, r25
    2cfa:	28 2f       	mov	r18, r24
    2cfc:	20 68       	ori	r18, 0x80	; 128
    2cfe:	ef 81       	ldd	r30, Y+7	; 0x07
    2d00:	f8 85       	ldd	r31, Y+8	; 0x08
    2d02:	82 81       	ldd	r24, Z+2	; 0x02
    2d04:	88 2f       	mov	r24, r24
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	88 0f       	add	r24, r24
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	88 0f       	add	r24, r24
    2d0e:	99 1f       	adc	r25, r25
    2d10:	88 0f       	add	r24, r24
    2d12:	99 1f       	adc	r25, r25
    2d14:	28 2b       	or	r18, r24
    2d16:	ef 81       	ldd	r30, Y+7	; 0x07
    2d18:	f8 85       	ldd	r31, Y+8	; 0x08
    2d1a:	81 81       	ldd	r24, Z+1	; 0x01
    2d1c:	88 2f       	mov	r24, r24
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	82 95       	swap	r24
    2d22:	92 95       	swap	r25
    2d24:	90 7f       	andi	r25, 0xF0	; 240
    2d26:	98 27       	eor	r25, r24
    2d28:	80 7f       	andi	r24, 0xF0	; 240
    2d2a:	98 27       	eor	r25, r24
    2d2c:	82 2b       	or	r24, r18
    2d2e:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((ConfigType -> BitRate) * baud_rate * 2UL))) - 1);
    2d30:	ef 81       	ldd	r30, Y+7	; 0x07
    2d32:	f8 85       	ldd	r31, Y+8	; 0x08
    2d34:	83 81       	ldd	r24, Z+3	; 0x03
    2d36:	88 2f       	mov	r24, r24
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	a0 e0       	ldi	r26, 0x00	; 0
    2d3c:	b0 e0       	ldi	r27, 0x00	; 0
    2d3e:	2b 81       	ldd	r18, Y+3	; 0x03
    2d40:	3c 81       	ldd	r19, Y+4	; 0x04
    2d42:	4d 81       	ldd	r20, Y+5	; 0x05
    2d44:	5e 81       	ldd	r21, Y+6	; 0x06
    2d46:	bc 01       	movw	r22, r24
    2d48:	cd 01       	movw	r24, r26
    2d4a:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <__mulsi3>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	9c 01       	movw	r18, r24
    2d54:	ad 01       	movw	r20, r26
    2d56:	22 0f       	add	r18, r18
    2d58:	33 1f       	adc	r19, r19
    2d5a:	44 1f       	adc	r20, r20
    2d5c:	55 1f       	adc	r21, r21
    2d5e:	80 e4       	ldi	r24, 0x40	; 64
    2d60:	92 e4       	ldi	r25, 0x42	; 66
    2d62:	af e0       	ldi	r26, 0x0F	; 15
    2d64:	b0 e0       	ldi	r27, 0x00	; 0
    2d66:	bc 01       	movw	r22, r24
    2d68:	cd 01       	movw	r24, r26
    2d6a:	0e 94 81 17 	call	0x2f02	; 0x2f02 <__udivmodsi4>
    2d6e:	da 01       	movw	r26, r20
    2d70:	c9 01       	movw	r24, r18
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	9a 83       	std	Y+2, r25	; 0x02
    2d76:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2d78:	e0 e4       	ldi	r30, 0x40	; 64
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d80:	89 2f       	mov	r24, r25
    2d82:	99 27       	eor	r25, r25
    2d84:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2d86:	e9 e2       	ldi	r30, 0x29	; 41
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	80 83       	st	Z, r24
}
    2d8e:	28 96       	adiw	r28, 0x08	; 8
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	cd bf       	out	0x3d, r28	; 61
    2d9a:	cf 91       	pop	r28
    2d9c:	df 91       	pop	r29
    2d9e:	08 95       	ret

00002da0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2da0:	df 93       	push	r29
    2da2:	cf 93       	push	r28
    2da4:	0f 92       	push	r0
    2da6:	cd b7       	in	r28, 0x3d	; 61
    2da8:	de b7       	in	r29, 0x3e	; 62
    2daa:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2dac:	eb e2       	ldi	r30, 0x2B	; 43
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	88 2f       	mov	r24, r24
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	80 72       	andi	r24, 0x20	; 32
    2db8:	90 70       	andi	r25, 0x00	; 0
    2dba:	00 97       	sbiw	r24, 0x00	; 0
    2dbc:	b9 f3       	breq	.-18     	; 0x2dac <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2dbe:	ec e2       	ldi	r30, 0x2C	; 44
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2dc6:	0f 90       	pop	r0
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	08 95       	ret

00002dce <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2dce:	df 93       	push	r29
    2dd0:	cf 93       	push	r28
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2dd6:	eb e2       	ldi	r30, 0x2B	; 43
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	88 23       	and	r24, r24
    2dde:	dc f7       	brge	.-10     	; 0x2dd6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2de0:	ec e2       	ldi	r30, 0x2C	; 44
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	80 81       	ld	r24, Z
}
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	00 d0       	rcall	.+0      	; 0x2df2 <UART_sendString+0x6>
    2df2:	0f 92       	push	r0
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	9b 83       	std	Y+3, r25	; 0x03
    2dfa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2dfc:	19 82       	std	Y+1, r1	; 0x01
    2dfe:	0e c0       	rjmp	.+28     	; 0x2e1c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	28 2f       	mov	r18, r24
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	8a 81       	ldd	r24, Y+2	; 0x02
    2e08:	9b 81       	ldd	r25, Y+3	; 0x03
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	e2 0f       	add	r30, r18
    2e0e:	f3 1f       	adc	r31, r19
    2e10:	80 81       	ld	r24, Z
    2e12:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <UART_sendByte>
		i++;
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	8f 5f       	subi	r24, 0xFF	; 255
    2e1a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	28 2f       	mov	r18, r24
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	8a 81       	ldd	r24, Y+2	; 0x02
    2e24:	9b 81       	ldd	r25, Y+3	; 0x03
    2e26:	fc 01       	movw	r30, r24
    2e28:	e2 0f       	add	r30, r18
    2e2a:	f3 1f       	adc	r31, r19
    2e2c:	80 81       	ld	r24, Z
    2e2e:	88 23       	and	r24, r24
    2e30:	39 f7       	brne	.-50     	; 0x2e00 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2e32:	0f 90       	pop	r0
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	cf 91       	pop	r28
    2e3a:	df 91       	pop	r29
    2e3c:	08 95       	ret

00002e3e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2e3e:	0f 93       	push	r16
    2e40:	1f 93       	push	r17
    2e42:	df 93       	push	r29
    2e44:	cf 93       	push	r28
    2e46:	00 d0       	rcall	.+0      	; 0x2e48 <UART_receiveString+0xa>
    2e48:	0f 92       	push	r0
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	9b 83       	std	Y+3, r25	; 0x03
    2e50:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e52:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	28 2f       	mov	r18, r24
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5e:	8c 01       	movw	r16, r24
    2e60:	02 0f       	add	r16, r18
    2e62:	13 1f       	adc	r17, r19
    2e64:	0e 94 e7 16 	call	0x2dce	; 0x2dce <UART_recieveByte>
    2e68:	f8 01       	movw	r30, r16
    2e6a:	80 83       	st	Z, r24
    2e6c:	0f c0       	rjmp	.+30     	; 0x2e8c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	8f 5f       	subi	r24, 0xFF	; 255
    2e72:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	28 2f       	mov	r18, r24
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7e:	8c 01       	movw	r16, r24
    2e80:	02 0f       	add	r16, r18
    2e82:	13 1f       	adc	r17, r19
    2e84:	0e 94 e7 16 	call	0x2dce	; 0x2dce <UART_recieveByte>
    2e88:	f8 01       	movw	r30, r16
    2e8a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	28 2f       	mov	r18, r24
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	8a 81       	ldd	r24, Y+2	; 0x02
    2e94:	9b 81       	ldd	r25, Y+3	; 0x03
    2e96:	fc 01       	movw	r30, r24
    2e98:	e2 0f       	add	r30, r18
    2e9a:	f3 1f       	adc	r31, r19
    2e9c:	80 81       	ld	r24, Z
    2e9e:	83 32       	cpi	r24, 0x23	; 35
    2ea0:	31 f7       	brne	.-52     	; 0x2e6e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
    2ea4:	28 2f       	mov	r18, r24
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    2eac:	fc 01       	movw	r30, r24
    2eae:	e2 0f       	add	r30, r18
    2eb0:	f3 1f       	adc	r31, r19
    2eb2:	10 82       	st	Z, r1
}
    2eb4:	0f 90       	pop	r0
    2eb6:	0f 90       	pop	r0
    2eb8:	0f 90       	pop	r0
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	1f 91       	pop	r17
    2ec0:	0f 91       	pop	r16
    2ec2:	08 95       	ret

00002ec4 <__mulsi3>:
    2ec4:	62 9f       	mul	r22, r18
    2ec6:	d0 01       	movw	r26, r0
    2ec8:	73 9f       	mul	r23, r19
    2eca:	f0 01       	movw	r30, r0
    2ecc:	82 9f       	mul	r24, r18
    2ece:	e0 0d       	add	r30, r0
    2ed0:	f1 1d       	adc	r31, r1
    2ed2:	64 9f       	mul	r22, r20
    2ed4:	e0 0d       	add	r30, r0
    2ed6:	f1 1d       	adc	r31, r1
    2ed8:	92 9f       	mul	r25, r18
    2eda:	f0 0d       	add	r31, r0
    2edc:	83 9f       	mul	r24, r19
    2ede:	f0 0d       	add	r31, r0
    2ee0:	74 9f       	mul	r23, r20
    2ee2:	f0 0d       	add	r31, r0
    2ee4:	65 9f       	mul	r22, r21
    2ee6:	f0 0d       	add	r31, r0
    2ee8:	99 27       	eor	r25, r25
    2eea:	72 9f       	mul	r23, r18
    2eec:	b0 0d       	add	r27, r0
    2eee:	e1 1d       	adc	r30, r1
    2ef0:	f9 1f       	adc	r31, r25
    2ef2:	63 9f       	mul	r22, r19
    2ef4:	b0 0d       	add	r27, r0
    2ef6:	e1 1d       	adc	r30, r1
    2ef8:	f9 1f       	adc	r31, r25
    2efa:	bd 01       	movw	r22, r26
    2efc:	cf 01       	movw	r24, r30
    2efe:	11 24       	eor	r1, r1
    2f00:	08 95       	ret

00002f02 <__udivmodsi4>:
    2f02:	a1 e2       	ldi	r26, 0x21	; 33
    2f04:	1a 2e       	mov	r1, r26
    2f06:	aa 1b       	sub	r26, r26
    2f08:	bb 1b       	sub	r27, r27
    2f0a:	fd 01       	movw	r30, r26
    2f0c:	0d c0       	rjmp	.+26     	; 0x2f28 <__udivmodsi4_ep>

00002f0e <__udivmodsi4_loop>:
    2f0e:	aa 1f       	adc	r26, r26
    2f10:	bb 1f       	adc	r27, r27
    2f12:	ee 1f       	adc	r30, r30
    2f14:	ff 1f       	adc	r31, r31
    2f16:	a2 17       	cp	r26, r18
    2f18:	b3 07       	cpc	r27, r19
    2f1a:	e4 07       	cpc	r30, r20
    2f1c:	f5 07       	cpc	r31, r21
    2f1e:	20 f0       	brcs	.+8      	; 0x2f28 <__udivmodsi4_ep>
    2f20:	a2 1b       	sub	r26, r18
    2f22:	b3 0b       	sbc	r27, r19
    2f24:	e4 0b       	sbc	r30, r20
    2f26:	f5 0b       	sbc	r31, r21

00002f28 <__udivmodsi4_ep>:
    2f28:	66 1f       	adc	r22, r22
    2f2a:	77 1f       	adc	r23, r23
    2f2c:	88 1f       	adc	r24, r24
    2f2e:	99 1f       	adc	r25, r25
    2f30:	1a 94       	dec	r1
    2f32:	69 f7       	brne	.-38     	; 0x2f0e <__udivmodsi4_loop>
    2f34:	60 95       	com	r22
    2f36:	70 95       	com	r23
    2f38:	80 95       	com	r24
    2f3a:	90 95       	com	r25
    2f3c:	9b 01       	movw	r18, r22
    2f3e:	ac 01       	movw	r20, r24
    2f40:	bd 01       	movw	r22, r26
    2f42:	cf 01       	movw	r24, r30
    2f44:	08 95       	ret

00002f46 <__prologue_saves__>:
    2f46:	2f 92       	push	r2
    2f48:	3f 92       	push	r3
    2f4a:	4f 92       	push	r4
    2f4c:	5f 92       	push	r5
    2f4e:	6f 92       	push	r6
    2f50:	7f 92       	push	r7
    2f52:	8f 92       	push	r8
    2f54:	9f 92       	push	r9
    2f56:	af 92       	push	r10
    2f58:	bf 92       	push	r11
    2f5a:	cf 92       	push	r12
    2f5c:	df 92       	push	r13
    2f5e:	ef 92       	push	r14
    2f60:	ff 92       	push	r15
    2f62:	0f 93       	push	r16
    2f64:	1f 93       	push	r17
    2f66:	cf 93       	push	r28
    2f68:	df 93       	push	r29
    2f6a:	cd b7       	in	r28, 0x3d	; 61
    2f6c:	de b7       	in	r29, 0x3e	; 62
    2f6e:	ca 1b       	sub	r28, r26
    2f70:	db 0b       	sbc	r29, r27
    2f72:	0f b6       	in	r0, 0x3f	; 63
    2f74:	f8 94       	cli
    2f76:	de bf       	out	0x3e, r29	; 62
    2f78:	0f be       	out	0x3f, r0	; 63
    2f7a:	cd bf       	out	0x3d, r28	; 61
    2f7c:	09 94       	ijmp

00002f7e <__epilogue_restores__>:
    2f7e:	2a 88       	ldd	r2, Y+18	; 0x12
    2f80:	39 88       	ldd	r3, Y+17	; 0x11
    2f82:	48 88       	ldd	r4, Y+16	; 0x10
    2f84:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f86:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f88:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f90:	b9 84       	ldd	r11, Y+9	; 0x09
    2f92:	c8 84       	ldd	r12, Y+8	; 0x08
    2f94:	df 80       	ldd	r13, Y+7	; 0x07
    2f96:	ee 80       	ldd	r14, Y+6	; 0x06
    2f98:	fd 80       	ldd	r15, Y+5	; 0x05
    2f9a:	0c 81       	ldd	r16, Y+4	; 0x04
    2f9c:	1b 81       	ldd	r17, Y+3	; 0x03
    2f9e:	aa 81       	ldd	r26, Y+2	; 0x02
    2fa0:	b9 81       	ldd	r27, Y+1	; 0x01
    2fa2:	ce 0f       	add	r28, r30
    2fa4:	d1 1d       	adc	r29, r1
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	f8 94       	cli
    2faa:	de bf       	out	0x3e, r29	; 62
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	cd bf       	out	0x3d, r28	; 61
    2fb0:	ed 01       	movw	r28, r26
    2fb2:	08 95       	ret

00002fb4 <itoa>:
    2fb4:	fb 01       	movw	r30, r22
    2fb6:	9f 01       	movw	r18, r30
    2fb8:	e8 94       	clt
    2fba:	42 30       	cpi	r20, 0x02	; 2
    2fbc:	c4 f0       	brlt	.+48     	; 0x2fee <itoa+0x3a>
    2fbe:	45 32       	cpi	r20, 0x25	; 37
    2fc0:	b4 f4       	brge	.+44     	; 0x2fee <itoa+0x3a>
    2fc2:	4a 30       	cpi	r20, 0x0A	; 10
    2fc4:	29 f4       	brne	.+10     	; 0x2fd0 <itoa+0x1c>
    2fc6:	97 fb       	bst	r25, 7
    2fc8:	1e f4       	brtc	.+6      	; 0x2fd0 <itoa+0x1c>
    2fca:	90 95       	com	r25
    2fcc:	81 95       	neg	r24
    2fce:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd0:	64 2f       	mov	r22, r20
    2fd2:	77 27       	eor	r23, r23
    2fd4:	0e 94 0b 18 	call	0x3016	; 0x3016 <__udivmodhi4>
    2fd8:	80 5d       	subi	r24, 0xD0	; 208
    2fda:	8a 33       	cpi	r24, 0x3A	; 58
    2fdc:	0c f0       	brlt	.+2      	; 0x2fe0 <itoa+0x2c>
    2fde:	89 5d       	subi	r24, 0xD9	; 217
    2fe0:	81 93       	st	Z+, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	00 97       	sbiw	r24, 0x00	; 0
    2fe6:	a1 f7       	brne	.-24     	; 0x2fd0 <itoa+0x1c>
    2fe8:	16 f4       	brtc	.+4      	; 0x2fee <itoa+0x3a>
    2fea:	5d e2       	ldi	r21, 0x2D	; 45
    2fec:	51 93       	st	Z+, r21
    2fee:	10 82       	st	Z, r1
    2ff0:	c9 01       	movw	r24, r18
    2ff2:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <strrev>

00002ff6 <strrev>:
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	67 2f       	mov	r22, r23
    2ffc:	71 91       	ld	r23, Z+
    2ffe:	77 23       	and	r23, r23
    3000:	e1 f7       	brne	.-8      	; 0x2ffa <strrev+0x4>
    3002:	32 97       	sbiw	r30, 0x02	; 2
    3004:	04 c0       	rjmp	.+8      	; 0x300e <strrev+0x18>
    3006:	7c 91       	ld	r23, X
    3008:	6d 93       	st	X+, r22
    300a:	70 83       	st	Z, r23
    300c:	62 91       	ld	r22, -Z
    300e:	ae 17       	cp	r26, r30
    3010:	bf 07       	cpc	r27, r31
    3012:	c8 f3       	brcs	.-14     	; 0x3006 <strrev+0x10>
    3014:	08 95       	ret

00003016 <__udivmodhi4>:
    3016:	aa 1b       	sub	r26, r26
    3018:	bb 1b       	sub	r27, r27
    301a:	51 e1       	ldi	r21, 0x11	; 17
    301c:	07 c0       	rjmp	.+14     	; 0x302c <__udivmodhi4_ep>

0000301e <__udivmodhi4_loop>:
    301e:	aa 1f       	adc	r26, r26
    3020:	bb 1f       	adc	r27, r27
    3022:	a6 17       	cp	r26, r22
    3024:	b7 07       	cpc	r27, r23
    3026:	10 f0       	brcs	.+4      	; 0x302c <__udivmodhi4_ep>
    3028:	a6 1b       	sub	r26, r22
    302a:	b7 0b       	sbc	r27, r23

0000302c <__udivmodhi4_ep>:
    302c:	88 1f       	adc	r24, r24
    302e:	99 1f       	adc	r25, r25
    3030:	5a 95       	dec	r21
    3032:	a9 f7       	brne	.-22     	; 0x301e <__udivmodhi4_loop>
    3034:	80 95       	com	r24
    3036:	90 95       	com	r25
    3038:	bc 01       	movw	r22, r24
    303a:	cd 01       	movw	r24, r26
    303c:	08 95       	ret

0000303e <_exit>:
    303e:	f8 94       	cli

00003040 <__stop_program>:
    3040:	ff cf       	rjmp	.-2      	; 0x3040 <__stop_program>
